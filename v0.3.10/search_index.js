var documenterSearchIndex = {"docs":
[{"location":"#JuDoc.jl-Documentation-1","page":"Home","title":"JuDoc.jl - Documentation","text":"","category":"section"},{"location":"#","page":"Home","title":"Home","text":"JuDoc is a simple static site generator (SSG) oriented towards technical blogging (code, maths, ...) and light, fast-loading pages. The base syntax is plain markdown with a few extensions such as the ability to define and use LaTeX-like commands in or outside of maths environments (see the Syntax section).","category":"page"},{"location":"#","page":"Home","title":"Home","text":"➡ For a list of the key features see here.","category":"page"},{"location":"#","page":"Home","title":"Home","text":"➡ For a demo of available templates, see <a href=\"https://tlienart.github.io/JuDocTemplates.jl/\" target=\"_blank\" rel=\"noopener noreferrer\">here</a> (opens in a new tab).","category":"page"},{"location":"#","page":"Home","title":"Home","text":"note: Note\nThis package is still young and issues should be expected, comments, questions, bug reports etc. are welcome to make it better, see also the Contributing section.","category":"page"},{"location":"#","page":"Home","title":"Home","text":"On this page:","category":"page"},{"location":"#","page":"Home","title":"Home","text":"Installation\nExternal dependencies\nQuick start\nAbout\nFeatures\nWhy?\nLicenses","category":"page"},{"location":"#Installation-1","page":"Home","title":"Installation","text":"","category":"section"},{"location":"#","page":"Home","title":"Home","text":"With Julia ≥ 1.1,","category":"page"},{"location":"#","page":"Home","title":"Home","text":"pkg> add JuDoc","category":"page"},{"location":"#External-dependencies-1","page":"Home","title":"External dependencies","text":"","category":"section"},{"location":"#","page":"Home","title":"Home","text":"JuDoc allows a post-processing step (see optimize) which pre-renders highlighted code blocks and math environments and minifies generated HTML and CSS. This step requires a few external dependencies:","category":"page"},{"location":"#","page":"Home","title":"Home","text":"node.js for the pre-rendering of KaTeX and code highlighting,\npython3 for the minification of the site,\ngit for automating pushing and pulling to a remote repository.","category":"page"},{"location":"#","page":"Home","title":"Home","text":"Assuming you have those, you will then need to install highlight.js via npm:","category":"page"},{"location":"#","page":"Home","title":"Home","text":"[sudo] npm install -g highlight.js","category":"page"},{"location":"#","page":"Home","title":"Home","text":"and the python package css_html_js_minify which you can install with pip3 (if you have python3, JuDoc will try to do this for you):","category":"page"},{"location":"#","page":"Home","title":"Home","text":"pip3 install css_html_js_minify # mac/linux\npy -3 -m pip install css_html_js_minify # windows","category":"page"},{"location":"#","page":"Home","title":"Home","text":"If you've installed these dependencies after adding JuDoc, you will need to re-build the package with","category":"page"},{"location":"#","page":"Home","title":"Home","text":"pkg> build JuDoc","category":"page"},{"location":"#","page":"Home","title":"Home","text":"You can subsequently check whether JuDoc was able to find them by looking at:","category":"page"},{"location":"#","page":"Home","title":"Home","text":"julia> using JuDoc\njulia> JuDoc.JD_CAN_PRERENDER\ntrue\njulia> JuDoc.JD_CAN_HIGHLIGHT\ntrue\njulia> JuDoc.JD_CAN_MINIFY\ntrue","category":"page"},{"location":"#","page":"Home","title":"Home","text":"note: Note\nThese external dependencies are not required to run JuDoc, they are just recommended to benefit from some of the post-processing machinery such as optimize or publish.","category":"page"},{"location":"#Troubleshooting-1","page":"Home","title":"Troubleshooting","text":"","category":"section"},{"location":"#","page":"Home","title":"Home","text":"If JuDoc complains that it can't find a dependency while you believe that it is installed on your computer, you may have to help JuDoc know how to call the dependency. For this, you can specify in your .julia/config/startup.jl:","category":"page"},{"location":"#","page":"Home","title":"Home","text":"ENV[\"PYTHON3\"] = \"python3\"\nENV[\"PIP3\"] = \"pip3\"\nENV[\"NODE\"] = \"node\"","category":"page"},{"location":"#","page":"Home","title":"Home","text":"replace the values by however python 3, node and pip are called on your computer i.e., whatever makes the following commands work:","category":"page"},{"location":"#","page":"Home","title":"Home","text":"julia> success(`python3 -V`)\ntrue\njulia> success(`pip3 -v`)\ntrue\njulia> success(`node -v`)\ntrue","category":"page"},{"location":"#Highlight.js-1","page":"Home","title":"Highlight.js","text":"","category":"section"},{"location":"#","page":"Home","title":"Home","text":"If you have issues with getting highlight.js to work, you should give these a try:","category":"page"},{"location":"#","page":"Home","title":"Home","text":"On Windows you may need to add the following to your environment variables (source): NODE_PATH=%AppData%\\npm\\node_modules\nYou may need to use the --save switch (source): [sudo] npm install -g --save highlight.js","category":"page"},{"location":"#Quick-start-1","page":"Home","title":"Quick start","text":"","category":"section"},{"location":"#","page":"Home","title":"Home","text":"Change directory to an appropriate sandbox location on your computer, start Julia and:","category":"page"},{"location":"#","page":"Home","title":"Home","text":"julia> using JuDoc\njulia> newsite(\"test\", template=\"pure-sm\")\n✓ Website folder generated at \"test\" (now the current directory).\n→ Use serve() from JuDoc to see the website in your browser.\n\njulia> serve()\n→ Initial full pass...\n→ Starting the server...\n✓ LiveServer listening on http://localhost:8000/ ...\n  (use CTRL+C to shut down)","category":"page"},{"location":"#","page":"Home","title":"Home","text":"This will generate a folder test with overall structure:","category":"page"},{"location":"#","page":"Home","title":"Home","text":".\n├── assets/\n├── css/\n├── index.html\n├── libs/\n├── pub/\n└── src\n    ├── _css/\n    ├── _html_parts/\n    ├── config.md\n    ├── index.md\n    └── pages/","category":"page"},{"location":"#","page":"Home","title":"Home","text":"You can see what the corresponding website looks like by opening a browser at the given address http://localhost:8000.","category":"page"},{"location":"#","page":"Home","title":"Home","text":"The key folder in which you should work is src/. For instance, a good way to become familiar with JuDoc's extended markdown syntax is to head to src/index.md and modify its content while keeping an eye in a browser on http://localhost:8000/index.html.","category":"page"},{"location":"#","page":"Home","title":"Home","text":"Once you've had a feel for the basic syntax, head over to the Workflow section of the manual for more information on available templates, the folder structure etc.","category":"page"},{"location":"#About-1","page":"Home","title":"About","text":"","category":"section"},{"location":"#Features-1","page":"Home","title":"Features","text":"","category":"section"},{"location":"#","page":"Home","title":"Home","text":"This is a partial list of JuDoc's features that you may find interesting/useful; head to the Manual part of the docs for more details.","category":"page"},{"location":"#","page":"Home","title":"Home","text":"(docs) LaTeX-like definition of commands (via \\newcommand{..}[.]{..})\n(docs) inclusion of user-defined div-blocks via @@divname ... @@ and raw-html via ~~~ ... ~~~\n(docs) maths rendered via KaTeX, code via highlight.js both can be pre-rendered (see further below)\n(docs) hyper-references for equations and citations\n(docs) simple html templating\nfast page generation (~5ms per page on warm session)\nlive preview (via LiveServer.jl)\n(docs) optimisation step to speed up wepage rendering:\npre-rendered KaTeX (requires node)\npre-rendered code highlighting (requires node and highlight.js)\nminified output (via css-html-js-minify, requires python3)\n(docs) all-in-one \"publish\" step to compile, optimise and push your website","category":"page"},{"location":"#","page":"Home","title":"Home","text":"There are also a few features to deal with code:","category":"page"},{"location":"#","page":"Home","title":"Home","text":"(docs) insertion of code blocks with or without live-evaluation (a bit like Weave.jl),\n(docs) working with Literate.jl","category":"page"},{"location":"#Why?-1","page":"Home","title":"Why?","text":"","category":"section"},{"location":"#","page":"Home","title":"Home","text":"There is a multitude of static site generators out there so why bother with yet another one? and is this one worth your time?","category":"page"},{"location":"#","page":"Home","title":"Home","text":"I didn't start working on JuDoc hoping to \"beat\" mature and sophisticated generators like Hugo etc. Rather, a few years back I was using Jacob Mattingley's Jemdoc package in Python with Wonseok Shin's neat extension for MathJax support and decided I wanted to build something similar in Julia (whence the name) and improve on the few things I didn't like.","category":"page"},{"location":"#","page":"Home","title":"Home","text":"aside: Aside\nInterestingly, there still seems to be a number of people who use Jemdoc in academia. For instance Ben Recht, Madeleine Udell or Marco Cuturi. So working on JuDoc seemed a worthwhile.","category":"page"},{"location":"#","page":"Home","title":"Home","text":"Among the things I wanted to improve over Jemdoc were:","category":"page"},{"location":"#","page":"Home","title":"Home","text":"support live-preview with near-instant rendering of modifications,\ngenerate fast-loading webpages,\nsupport KaTeX,\nallow LaTeX-like commands including outside of maths environment,\nbetter control over the layout with a simple templating system.","category":"page"},{"location":"#","page":"Home","title":"Home","text":"When compared with more serious static site generators like Hugo or Jekyll, clearly JuDoc is not in the same league. One element that may be particularly useful though are the markdown extensions which allow to construct sophisticated commands and thereby effectively define \"your own markdown flavour\".","category":"page"},{"location":"#","page":"Home","title":"Home","text":"If you just want formatted text and pictures, JuDoc will probably not be very useful to you. However, if you want to write technical documents with tables, maths, recurring elements etc, then JuDoc may be helpful.","category":"page"},{"location":"#","page":"Home","title":"Home","text":"If you think JuDoc could help you but you're not sure or you seem to be blocked by a missing feature, please open an issue.","category":"page"},{"location":"#Licenses-1","page":"Home","title":"Licenses","text":"","category":"section"},{"location":"#","page":"Home","title":"Home","text":"Core: JuDoc, JuDocTemplates and LiveServer are all MIT licensed.","category":"page"},{"location":"#","page":"Home","title":"Home","text":"External: these libraries are used \"as-is\":","category":"page"},{"location":"#","page":"Home","title":"Home","text":"KaTeX is MIT licensed,\nNode's is essentially MIT licensed,\ncss-html-js-minify is LGPL licensed,\nhighlight.js is BSD licensed,\ngit is GPL licensed.","category":"page"},{"location":"man/workflow/#Workflow-1","page":"Workflow","title":"Workflow","text":"","category":"section"},{"location":"man/workflow/#","page":"Workflow","title":"Workflow","text":"In this section it is assumed that you will eventually host your website on GitHub or GitLab but it shouldn't be hard to adapt to your particular case if you intend to self-host or use another service.","category":"page"},{"location":"man/workflow/#","page":"Workflow","title":"Workflow","text":"Contents:","category":"page"},{"location":"man/workflow/#","page":"Workflow","title":"Workflow","text":"Local editing\nFolder structure\nLibraries\nHighlight\nHosting the website\nHosting the website as a project website\nOptimisation step\n(git) synchronisation\nMerge conflicts\nUsing Literate.jl","category":"page"},{"location":"man/workflow/#Local-editing-1","page":"Workflow","title":"Local editing","text":"","category":"section"},{"location":"man/workflow/#","page":"Workflow","title":"Workflow","text":"To get started, the easiest is to use the newsite function to generate a website folder which you can then modify to your heart's content. The command takes one mandatory argument: the name of the folder, and you can specify a template with template=...:","category":"page"},{"location":"man/workflow/#","page":"Workflow","title":"Workflow","text":"julia> newsite(\"Test\"; template=\"pure-sm\")\n✓ Website folder generated at Test (now the current directory).\n→ Use `serve()` from `JuDoc` to see the website in your browser.","category":"page"},{"location":"man/workflow/#","page":"Workflow","title":"Workflow","text":"Click <a href=\"https://tlienart.github.io/JuDocTemplates.jl/\" target=\"_blank\" rel=\"noopener noreferrer\">here</a> for a demo of the supported templates (opens in a new tab).","category":"page"},{"location":"man/workflow/#","page":"Workflow","title":"Workflow","text":"Once you have created a new site with the template of your choice and are in the corresponding folder (newsite will cd to the new folder) you can serve your website with","category":"page"},{"location":"man/workflow/#","page":"Workflow","title":"Workflow","text":"julia> serve()\n✓ LiveServer listening on http://localhost:8000/ ...\n  (use CTRL+C to shut down)","category":"page"},{"location":"man/workflow/#","page":"Workflow","title":"Workflow","text":"and navigate in a browser to the corresponding address to see the website being rendered.","category":"page"},{"location":"man/workflow/#","page":"Workflow","title":"Workflow","text":"note: Note\nIf you're using the Atom editor, you may like to use the Atom browser extension which allows you to have a browser in an Atom pane.","category":"page"},{"location":"man/workflow/#Folder-structure-1","page":"Workflow","title":"Folder structure","text":"","category":"section"},{"location":"man/workflow/#","page":"Workflow","title":"Workflow","text":"The newsite command above generates folders and examples files following the appropriate structure, so the easiest is to start with that and modify in place. The main folders (generated by newsite) are:","category":"page"},{"location":"man/workflow/#","page":"Workflow","title":"Workflow","text":".\n├── assets/\n├── libs/\n└── src/","category":"page"},{"location":"man/workflow/#","page":"Workflow","title":"Workflow","text":"Once you run serve the first time, two additional folders are generated (css/ and pub/) along with the landing page index.html.","category":"page"},{"location":"man/workflow/#","page":"Workflow","title":"Workflow","text":"Among these folders,","category":"page"},{"location":"man/workflow/#","page":"Workflow","title":"Workflow","text":"the main folder is src/ and its subfolders, this is effectively where the source for your site is,\nyou should ignore css/ and pub/ these are generated and any changes you'd do there will be silently over-written whenever you modify files in src/; the same comment holds for index.html,\nthe folders assets/ and libs/ contain auxiliary items that are useful for your site: assets/ would contain code snippets, images etc. while libs/ would contain javascript libraries that you may need (KaTeX and highlight are in there by default).","category":"page"},{"location":"man/workflow/#","page":"Workflow","title":"Workflow","text":"In the src/ folder, the structure is:","category":"page"},{"location":"man/workflow/#","page":"Workflow","title":"Workflow","text":".\n├── _css\n│   ├── judoc.css\n│   └── ...\n├── _html_parts\n│   ├── foot.html\n│   ├── head.html\n│   └── ...\n├── config.md\n├── index.md\n└── pages\n    ├── page1.md\n    └── ...","category":"page"},{"location":"man/workflow/#","page":"Workflow","title":"Workflow","text":"Pages","category":"page"},{"location":"man/workflow/#","page":"Workflow","title":"Workflow","text":"The index.md will generate the site's landing page. The pages/page1.md would correspond to pages on your website (you can have whatever subfolder structure you want in there, and will just have to adapt internal links appropriately). See also the Syntax.","category":"page"},{"location":"man/workflow/#","page":"Workflow","title":"Workflow","text":"note: Note\nAt any point you can write pages in HTML from scratch if you want to go beyond what JuDoc can offer; these pages will just be copied as they are. So for instance you may prefer to write an index.html file instead of using the index.md to generate it. You would still put it at the exact same place though (src/index.html) and let JuDoc copy the files at the appropriate place.","category":"page"},{"location":"man/workflow/#","page":"Workflow","title":"Workflow","text":"HTML parts","category":"page"},{"location":"man/workflow/#","page":"Workflow","title":"Workflow","text":"The files in _html_parts/ are the building blocks that will go around the (processed) content contained in the *.md pages. So the head.html will be inserted before, the foot.html after etc. Adjusting these will help you make sure the site has the exact layout you want. The layout can also depend on the page you're on if it uses {{ispage path/to/page}} ... {{end}}  (see Templating).","category":"page"},{"location":"man/workflow/#","page":"Workflow","title":"Workflow","text":"CSS","category":"page"},{"location":"man/workflow/#","page":"Workflow","title":"Workflow","text":"The style sheets in _css/ will help you tune the way your site looks. The judoc.css is the stylesheet that corresponds more specifically to the styling of the .jd-content div and all that goes in it, it is usually the first style-sheet that should be loaded. The simplest way to adjust the style easily would be to define your own stylesheet _css/adjustments.css and it be the last stylesheet loaded in _html_parts/head.html so that you can easily overwrite whatever properties you don't like and define your own. You could also have specific stylesheet that would only be loaded on specific pages using {{ispages ...}} (see Templating).","category":"page"},{"location":"man/workflow/#","page":"Workflow","title":"Workflow","text":"note: Note\nIt wouldn't be hard for JuDoc to use page variables in the CSS stylesheet too. You could then do things like@def col1 = aliceblueand.mydiv { color: $col1 }I'm not 100% sure how useful that could be though so if you would like to see this happen, please open an issue!","category":"page"},{"location":"man/workflow/#","page":"Workflow","title":"Workflow","text":"Folder organisation","category":"page"},{"location":"man/workflow/#","page":"Workflow","title":"Workflow","text":"Auxiliary assets such as images, code snippets, pdfs etc. should ideally go in the assets/ folder (or subfolders). The files that are in assets/ will not tracked for change and will also not get copied around.","category":"page"},{"location":"man/workflow/#","page":"Workflow","title":"Workflow","text":"An alternative approach is to keep auxiliary assets in src/pages/ (or subfolders). The main advantage being that some users might find it better to structure their content with the page markdown as well as the page resources in one folder. If you decide to do this, bear in mind that whatever is in src/pages/ gets copied to the generated pub/ folder during the initial website compilation. While this will be imperceptible if you only have a few light assets, it could slow the initial pass down if you have many heavy assets; if that's the case though, you are probably better off with the first approach putting all resources in assets/ and subfolders.","category":"page"},{"location":"man/workflow/#Libraries-1","page":"Workflow","title":"Libraries","text":"","category":"section"},{"location":"man/workflow/#","page":"Workflow","title":"Workflow","text":"Assuming you used the newsite function to get started, you have a libs/ folder with","category":"page"},{"location":"man/workflow/#","page":"Workflow","title":"Workflow","text":".\n├── highlight/\n└── katex/","category":"page"},{"location":"man/workflow/#","page":"Workflow","title":"Workflow","text":"If you require other libraries to run your website, this is where you should put them while not forgetting to load them in your _html_parts; for instance in the default foot_highlight.html you will find:","category":"page"},{"location":"man/workflow/#","page":"Workflow","title":"Workflow","text":"<script src=\"/libs/highlight/highlight.pack.js\"></script>\n<script>hljs.initHighlightingOnLoad();hljs.configure({tabReplace: '    '});</script>","category":"page"},{"location":"man/workflow/#","page":"Workflow","title":"Workflow","text":"which loads and applies highlight.js.","category":"page"},{"location":"man/workflow/#Highlight-1","page":"Workflow","title":"Highlight","text":"","category":"section"},{"location":"man/workflow/#","page":"Workflow","title":"Workflow","text":"Assuming you used the newsite function to get started, you have the libs/highlight/ folder with","category":"page"},{"location":"man/workflow/#","page":"Workflow","title":"Workflow","text":".\n├── github.min.css\n└── highlight.pack.js","category":"page"},{"location":"man/workflow/#","page":"Workflow","title":"Workflow","text":"If you want to change either how things look or which languages are supported, you should head to highlightjs.org, select the languages you want in the Custom package section, download the bundle and copy over the relevant files to libs/highlight/. By default, the files that are created with newsite allow highlighting for bash, html/xml, python, julia, julia-repl, css, r, markdown, ini/TOML, ruby and yaml.","category":"page"},{"location":"man/workflow/#","page":"Workflow","title":"Workflow","text":"Just remember to refer to the appropriate style-sheet in your HTML building blocks for instance the default src/_html_parts/head_highlight.html contains:","category":"page"},{"location":"man/workflow/#","page":"Workflow","title":"Workflow","text":"<link rel=\"stylesheet\" href=\"/libs/highlight/github.min.css\">","category":"page"},{"location":"man/workflow/#Hosting-the-website-1","page":"Workflow","title":"Hosting the website","text":"","category":"section"},{"location":"man/workflow/#","page":"Workflow","title":"Workflow","text":"In this section, the assumption is that you will host your website on GitHub. The procedure should be very similar with GitLab. If you're using your own hosting, you would pretty much just need to copy/clone the content of your folder.","category":"page"},{"location":"man/workflow/#","page":"Workflow","title":"Workflow","text":"On GitHub/GitLab, the first step is to create a repository that would be acceptable for a personal webpage.","category":"page"},{"location":"man/workflow/#","page":"Workflow","title":"Workflow","text":"Follow the guide to do so on GitHub.\nOr the guide to do so on GitLab.","category":"page"},{"location":"man/workflow/#","page":"Workflow","title":"Workflow","text":"Once the repository is created, clone it on your computer, remove whatever is in it if it wasn't empty and copy over the content of the website folder (so if you had done newsite(\"Test/\") then you'd copy over the content of the folder Test into the newly cloned folder username.github.io/).","category":"page"},{"location":"man/workflow/#","page":"Workflow","title":"Workflow","text":"Now just do the usual git add, commit and push and your site will be live in a matter of minutes.","category":"page"},{"location":"man/workflow/#Gitlab-users-1","page":"Workflow","title":"Gitlab users","text":"","category":"section"},{"location":"man/workflow/#","page":"Workflow","title":"Workflow","text":"On Gitlab, there are two small differences:","category":"page"},{"location":"man/workflow/#","page":"Workflow","title":"Workflow","text":"your website needs to eventually be in a public/ directory of the repository,\nyou need to specify a CI/CD script that tells Gitlab how to deploy the site.","category":"page"},{"location":"man/workflow/#","page":"Workflow","title":"Workflow","text":"Luckily both of these can be done in one shot, all you need to do is add a script as follows in your repository:","category":"page"},{"location":"man/workflow/#","page":"Workflow","title":"Workflow","text":"pages:\n  stage: deploy\n  script:\n    - mkdir .public\n    - cp -r * .public\n    - mv .public public\n  artifacts:\n    paths:\n      - public\n  only:\n    - master","category":"page"},{"location":"man/workflow/#","page":"Workflow","title":"Workflow","text":"The only non-trivial bit is the script: section: the only thing it does is tell the runner to copy all your files in a public/ \"virtual\" directory. Note that this will not physically create a directory in your repo, rather it will, on Gitlab, make sure the files are located in such a way that they can be rendered.","category":"page"},{"location":"man/workflow/#","page":"Workflow","title":"Workflow","text":"Note: if for some reason your repository is private and you would like to avoid for some files to be in the public/ folder, then just add a couple of lines in the script: part removing  (rm) the files you don't want to put there (e.g. sensitive data files).","category":"page"},{"location":"man/workflow/#Hosting-the-website-as-a-project-website-1","page":"Workflow","title":"Hosting the website as a project website","text":"","category":"section"},{"location":"man/workflow/#","page":"Workflow","title":"Workflow","text":"You may want to host your website not as a user website on username.github.io/ but as a project website on username.github.io/project/. For this to work well, the only thing that is required is to have all links start with /project/ instead of just / (the default). JuDoc makes this easy to do this as a final step before publication.","category":"page"},{"location":"man/workflow/#","page":"Workflow","title":"Workflow","text":"The best way to do it is:","category":"page"},{"location":"man/workflow/#","page":"Workflow","title":"Workflow","text":"specify a prepath global variable in your src/config.md file by adding a line: @def prepath = \"project\",\nuse optimize and/or publish (even if you don't do the minification or the prerendering).","category":"page"},{"location":"man/workflow/#","page":"Workflow","title":"Workflow","text":"Alternatively, you can specify the prepath when calling optimize or publish so for instance:","category":"page"},{"location":"man/workflow/#","page":"Workflow","title":"Workflow","text":"julia> optimize(prerender=false, minify=false, prepath=\"project\")","category":"page"},{"location":"man/workflow/#","page":"Workflow","title":"Workflow","text":"will do a pass over all generated pages and make sure all paths are prepended with /project/.","category":"page"},{"location":"man/workflow/#Optimisation-step-1","page":"Workflow","title":"Optimisation step","text":"","category":"section"},{"location":"man/workflow/#","page":"Workflow","title":"Workflow","text":"The optimize function should typically be run before you push your website online. That step can:","category":"page"},{"location":"man/workflow/#","page":"Workflow","title":"Workflow","text":"pre-render KaTeX and highlight code to HTML so that the pages don't have to load these javascript libraries,\nminify all generated HTML and CSS.","category":"page"},{"location":"man/workflow/#","page":"Workflow","title":"Workflow","text":"Those steps (which you can opt out of using the appropriate keyword prerender=false or minify=false) may lead to faster loading pages.","category":"page"},{"location":"man/workflow/#","page":"Workflow","title":"Workflow","text":"In order to run this optimisation step, you will need some dependencies but if you don't have them, JuDoc will tell you and ignore the corresponding step. Note also that doing a full pass of pre-rendering and minifying may take a few seconds depending on how many pages you have.","category":"page"},{"location":"man/workflow/#(git)-synchronisation-1","page":"Workflow","title":"(git) synchronisation","text":"","category":"section"},{"location":"man/workflow/#","page":"Workflow","title":"Workflow","text":"The publish function helps you wrap the optimize step as well as a git add, commit and push all in one (provided the optimize step didn't fail).","category":"page"},{"location":"man/workflow/#","page":"Workflow","title":"Workflow","text":"So, in short, your full workflow may look like","category":"page"},{"location":"man/workflow/#","page":"Workflow","title":"Workflow","text":"using JuDoc\n# cd to the appropriate directory\ncd(\"path/user.github.io\")\n# start serving\nserve()\n# ...\n# edit things, add pages, tune layout etc.\n# while keeping an eye on the browser to check\n# ...\n# all looks good, stop the server with CTRL+C\n^C\n# and now the final step to optimize and push:\npublish()","category":"page"},{"location":"man/workflow/#Merge-conflicts-1","page":"Workflow","title":"Merge conflicts","text":"","category":"section"},{"location":"man/workflow/#","page":"Workflow","title":"Workflow","text":"Since the pub/ and css/ and index.html folder are generated, it can sometimes cause git merge conflicts if, for instance, you have edited your website on computer A, optimised and published it and then subsequently pulled on computer B where – say – the content hasn't been minified yet. This could cause messy merge conflicts that would be annoying to fix. An easy way to reduce this risk is to simply remove the generated folders and files before pulling.","category":"page"},{"location":"man/workflow/#","page":"Workflow","title":"Workflow","text":"The function cleanpull does precisely that and should be used if you intend to edit your website from multiple computers. It simply:","category":"page"},{"location":"man/workflow/#","page":"Workflow","title":"Workflow","text":"removes all generate folders/files from your current director,\npulls.","category":"page"},{"location":"man/workflow/#","page":"Workflow","title":"Workflow","text":"So in such a case, your full workflow would be:","category":"page"},{"location":"man/workflow/#","page":"Workflow","title":"Workflow","text":"using JuDoc\ncd(\"path/user.github.io\")\ncleanpull()\nserve()\n# ...\npublish()","category":"page"},{"location":"man/workflow/#Using-Literate.jl-1","page":"Workflow","title":"Using Literate.jl","text":"","category":"section"},{"location":"man/workflow/#","page":"Workflow","title":"Workflow","text":"(Thanks to @cormullion for this section)","category":"page"},{"location":"man/workflow/#","page":"Workflow","title":"Workflow","text":"You can use Fredrik Ekre's Literate.jl package to create Markdown pages suitable for including in your JuDoc workflow. Literate.jl lets you write everything in a Julia source file, including your code, comments, tests, generated plots, and so on. When you execute the Julia file, all your code runs, and you can arrange for Literate.jl to write output such as Markdown-formatted text (and/or Jupyter notebooks) to suitable files. Literate.jl's syntax relies on various different flavours of comment, some of which are shown in the simple example below.","category":"page"},{"location":"man/workflow/#","page":"Workflow","title":"Workflow","text":"All non-Julia code has to be commented. Markdown markup language is applied immediately after the first #. You can see the > Markdown quote syntax and the ## Markdown header level 2 syntax. Lines preceded by #jl are not included in the Markdown output. Lines ending with #src are evaluated when you run the Julia file, but are not copied into the Markdown output file. Lines beginning with #src are Julia comments that don't make it as far as the Markdown file. Refer to Literate.jl's docs for more information.","category":"page"},{"location":"man/workflow/#","page":"Workflow","title":"Workflow","text":"You can see from the final five lines in the example that, when you run this file in Julia, the final step is to run the Literate.markdown function, taking the name of the Julia source file (functionoftheweek.jl) as input, and writing a new Markdown file to the directory src/pages/ as fotw_floorceil.md. Finally, if the JuDoc server is running, you'll find the generated HTML page as /pub/fotw_floorceil.html.","category":"page"},{"location":"man/workflow/#","page":"Workflow","title":"Workflow","text":"#jl This is a Julia source file!\n\n# @def title = \"Function of the week: floorceil()\"\n# @def hascode = true\n\n# > To be, or not to be. That's what they reckon.\n\n# ## Function of the week: floorceil()\n\n# Welcome to another weekly post in which I present a cool Julia function that I've\n# just discovered. This week it's the turn of `floorceil()`. It might sound like\n# something that comes in a tin, but in fact it's a useful function in the Dates module\n# that returns two Dates or DateTimes, one before, and one after, the specified time by\n# a certain unit of time.\n\n# For example:\n\nusing Dates\n\nDates.now()\n\n#\n# 2019-05-09T11:29:23.913\n#\n#src # would be nice if the output from commands could be included!\n\nDates.floorceil(now(), Dates.Month(1))\n\n#\n# (2019-05-01T00:00:00, 2019-06-01T00:00:00)\n#\n\n# and you can see that the result contains the beginning and the end of the month\n# that includes the present time of day.\n\na, b = (Dates.floorceil(now(), Dates.Month(1)));\nDates.canonicalize(Dates.CompoundPeriod(b - a))\n\n#\n# 4 weeks, 3 days\n#\n\n# That's all for today. Until next time!\n\n#src Lines with this tag appear only in this Julia source file.\nusing Literate                             #src\nLiterate.markdown(\"functionoftheweek.jl\",  #src\n    \"src/pages/\",                          #src\n    name=\"fotw_floorceil\",                 #src\n    documenter=false)                      #src\n","category":"page"},{"location":"man/workflow/#","page":"Workflow","title":"Workflow","text":"When this Julia file is executed, the resulting Markdown output will look like the listing below. Notice that the two JuDoc @def lines have survived the journey from Julia to Markdown intact, and will now be actively available for the JuDoc generation process.","category":"page"},{"location":"man/workflow/#","page":"Workflow","title":"Workflow","text":"@def title = \"Function of the week: floorceil()\"\n@def hascode = true\n\n> To be, or not to be. That's what they reckon.\n\n## Function of the week: floorceil()\n\nWelcome to another weekly post in which I present a cool Julia function that I've\njust discovered. This week it's the turn of `floorceil()`. It might sound like\nsomething that comes in a tin, but in fact it's a useful function in the Dates module\nthat returns two Dates or DateTimes, one before, and one after, the specified time by\na certain unit of time.\n\nFor example:\n\n```julia\nusing Dates\n\nDates.now()\n```\n\n2019-05-09T11:29:23.913\n\n```julia\nDates.floorceil(now(), Dates.Month(1))\n```\n\n(2019-05-01T00:00:00, 2019-06-01T00:00:00)\n\nand you can see that the result contains the beginning and the end of the month\nthat includes the present time of day.\n\n```julia\na, b = (Dates.floorceil(now(), Dates.Month(1)));\nDates.canonicalize(Dates.CompoundPeriod(b - a))\n```\n\n4 weeks, 3 days\n\nThat's all for today. Until next time!\n\n*This page was generated using [Literate.jl](https://github.com/fredrikekre/Literate.jl).*","category":"page"},{"location":"man/syntax/#Syntax-1","page":"Syntax","title":"Syntax","text":"","category":"section"},{"location":"man/syntax/#","page":"Syntax","title":"Syntax","text":"This page is about the modified markdown syntax that is used in JuDoc. For the HTML templating syntax, see Templating.","category":"page"},{"location":"man/syntax/#","page":"Syntax","title":"Syntax","text":"A good way to become familiar with the JuDoc syntax is to generate a test-website and modify its index.md as explained in the Quick start tutorial. Most of what is presented here is also shown in that example.","category":"page"},{"location":"man/syntax/#","page":"Syntax","title":"Syntax","text":"Contents:","category":"page"},{"location":"man/syntax/#","page":"Syntax","title":"Syntax","text":"Basic syntax\nGeneral\nMaths\nDiv blocks\nTable of contents\nUsing raw HTML\nComments\nLaTeX commands\nNesting\nWhitespaces\nLocal vs global\nHyper-references\nCode insertions\nOn-the-fly evaluation\nMore on paths\nInserting the output\nHiding lines\nSeparate evaluation\nInserting code\nPlain-text output\nPlot output\nSlicing up\nFile insertions\nInserting a figure\nLinking a file\nInserting markdown\nInserting a table\nPage variables\nLocal page variables\nDefault variables\nGlobal page variables","category":"page"},{"location":"man/syntax/#Basics-1","page":"Syntax","title":"Basics","text":"","category":"section"},{"location":"man/syntax/#","page":"Syntax","title":"Syntax","text":"The basic syntax corresponds to standard markdown and the markdown cheatsheet is a great resource, in particular:","category":"page"},{"location":"man/syntax/#","page":"Syntax","title":"Syntax","text":"how to insert images,\nhow to insert code,\nhow to insert tables.","category":"page"},{"location":"man/syntax/#","page":"Syntax","title":"Syntax","text":"One key difference with Git Flavored Markdown (GFM) is that inline HTML should not be used unless fenced with ~~~ (see the section on injecting HTML below).","category":"page"},{"location":"man/syntax/#General-1","page":"Syntax","title":"General","text":"","category":"section"},{"location":"man/syntax/#","page":"Syntax","title":"Syntax","text":"While you should expect JuDoc to support core Common Mark syntax, there are a few particularities you should be aware of since the markdown parser implemented in JuDoc is the Julia Markdown parser (Markdown.parse) from stdlib coupled with a bunch of additions.","category":"page"},{"location":"man/syntax/#","page":"Syntax","title":"Syntax","text":"note: Note\nIf there is something not mentioned here that you expected to work according to Common Mark but it doesn't, please open an issue in the JuDoc repository.","category":"page"},{"location":"man/syntax/#Symbols-1","page":"Syntax","title":"Symbols","text":"","category":"section"},{"location":"man/syntax/#","page":"Syntax","title":"Syntax","text":"Outside code environments, there are a few quirks in dealing with symbols:","category":"page"},{"location":"man/syntax/#","page":"Syntax","title":"Syntax","text":"(dollar sign) to introduce a dollar sign, you must escape it with a backslash: \\$ as it is otherwise used to open and close inline math blocks,\n(HTML entity) you can use HTML entities without issues like &rarr; for \"→\" or in fact &#36; for \"$\",\n(backslash) to introduce a backslash, you can just use \\, a double backslash \\\\ can be used to signify a line break in text.","category":"page"},{"location":"man/syntax/#Other-notes-1","page":"Syntax","title":"Other notes","text":"","category":"section"},{"location":"man/syntax/#","page":"Syntax","title":"Syntax","text":"(header) should only be defined via a number of # at the start of a line (this is to help table-of-contents generation),\n(line break) use a double backslash \\\\ in text to force a line break (</br>), a bit like in LaTeX,\n(list items) must be on the same line (this is due to a limitation of the Julia Markdown parser),\n(indented blocks) you can use indented blocks to delimit code blocks but we strongly recommend you use fenced code blocks (with triple backticks) instead as the language can be made explicit and fenced code blocks can be executed (see the section on code insertion),\n(link reference) when using \"indirect links\" i.e. in the text you use something like [link name][link A] and then somewhere else you define [link A]: some/url/, we recommend you use unambiguous link identifiers (here [link A]). For instance we would recommend you not to use numbers like [link name][1], indeed if on the page you have some code where [1] appears, there is an ambiguity which could cause problems for the parser. (this is due to a hack to bypass a limitation of the Julia Markdown parser)\n(link title) are currently not supported e.g. something like [link A](some/url/ \"link title\").","category":"page"},{"location":"man/syntax/#Quirks-1","page":"Syntax","title":"Quirks","text":"","category":"section"},{"location":"man/syntax/#","page":"Syntax","title":"Syntax","text":"to introduce a horizontal line, use ---- or ***** but - - - or * * * won't work (this is a limitation of the Julia Markdown parser)\nif, for some reason, you want to have something like [...]: ... somewhere on your page that does not define a link, then you need to toggle ref-links off (@def reflinks = false) and only use inline links [link name](some/url/)","category":"page"},{"location":"man/syntax/#Maths-1","page":"Syntax","title":"Maths","text":"","category":"section"},{"location":"man/syntax/#","page":"Syntax","title":"Syntax","text":"For maths elements the usage is similar to standard LaTeX; whitespaces and new-lines don't matter. To see what you can and can't do in KaTeX, refer to their docs or this page.","category":"page"},{"location":"man/syntax/#","page":"Syntax","title":"Syntax","text":"In JuDoc you can have","category":"page"},{"location":"man/syntax/#","page":"Syntax","title":"Syntax","text":"inline math with $ ... $ (if you want to write a dollar symbol, you can escape it like so: \\$) e.g.:","category":"page"},{"location":"man/syntax/#","page":"Syntax","title":"Syntax","text":"the function $ f(x)=\\sin(x) $ is periodic, this is a dollar sign: \\$.","category":"page"},{"location":"man/syntax/#","page":"Syntax","title":"Syntax","text":"display math with $$ ... $$ or \\[ ... \\] e.g.:","category":"page"},{"location":"man/syntax/#","page":"Syntax","title":"Syntax","text":"the identity\n\\[ \\exp(i\\pi)+1=0 \\]\nis nice","category":"page"},{"location":"man/syntax/#","page":"Syntax","title":"Syntax","text":"display + aligned math (1) with \\begin{align} ... \\end{align} e.g.:","category":"page"},{"location":"man/syntax/#","page":"Syntax","title":"Syntax","text":"\\begin{align}\na&=5 \\\\\nb&=7 \\end{align}","category":"page"},{"location":"man/syntax/#","page":"Syntax","title":"Syntax","text":"display + aligned math (2) with \\begin{eqnarray} ... \\end{eqnarray} e.g.:","category":"page"},{"location":"man/syntax/#","page":"Syntax","title":"Syntax","text":"\\begin{eqnarray}\na &=& 5 \\\\\nb &=& 7 \\end{eqnarray}","category":"page"},{"location":"man/syntax/#","page":"Syntax","title":"Syntax","text":"note: Note\nIn LaTeX use of eqnarray tends to be discouraged due to possible interference with array column spacing. In JuDoc this will not happen. However it is identical with LaTeX in that the spacing around the = in a eqnarray is larger than in an align which you may prefer.","category":"page"},{"location":"man/syntax/#","page":"Syntax","title":"Syntax","text":"note: Note\nCurrently all display-math equations are numbered by default.","category":"page"},{"location":"man/syntax/#","page":"Syntax","title":"Syntax","text":"A final element to keep in mind is that you should surround inequality operators with whitespaces in order to avoid ambiguous commands in KaTeX. So in particular, both: $0< C$ or $0 < C$ are fine but $0 <C$ isn't. When in doubts add whitespaces.","category":"page"},{"location":"man/syntax/#Div-blocks-1","page":"Syntax","title":"Div blocks","text":"","category":"section"},{"location":"man/syntax/#","page":"Syntax","title":"Syntax","text":"In order to locally style your content, you can use @@divname ... @@ which will wrap some content in a <div class=\"divname\"> ... </div> block which you can style as you wish in your CSS stylesheet. For instance, you may want to highlight some content with a light-yellow background, you can do this with:","category":"page"},{"location":"man/syntax/#","page":"Syntax","title":"Syntax","text":"Some text then\n@@important\nSome important content\n@@\nand the rest of your text","category":"page"},{"location":"man/syntax/#","page":"Syntax","title":"Syntax","text":"and then, in your CSS, you could use","category":"page"},{"location":"man/syntax/#","page":"Syntax","title":"Syntax","text":".important {\n  background-color: lemonchiffon;\n  padding-left: 0.5em;\n  padding-top: 0.7em;\n  padding-bottom: 0.5em;\n  border-radius: 5px;\n}","category":"page"},{"location":"man/syntax/#","page":"Syntax","title":"Syntax","text":"which will look like","category":"page"},{"location":"man/syntax/#","page":"Syntax","title":"Syntax","text":"important: Important\nSome important content","category":"page"},{"location":"man/syntax/#","page":"Syntax","title":"Syntax","text":"These div blocks can be nested as in standard HTML.","category":"page"},{"location":"man/syntax/#Table-of-contents-1","page":"Syntax","title":"Table of contents","text":"","category":"section"},{"location":"man/syntax/#","page":"Syntax","title":"Syntax","text":"JuDoc can insert automatically generated table of contents simply by using \\toc or \\tableofcontents somewhere appropriate in your markdown. The table of contents will be generated in a jd-toc div block, so if you would like to modify the styling, you should modify .jd-toc ol, .jd-toc li etc in your CSS.","category":"page"},{"location":"man/syntax/#Using-raw-HTML-1","page":"Syntax","title":"Using raw HTML","text":"","category":"section"},{"location":"man/syntax/#","page":"Syntax","title":"Syntax","text":"You can inject HTML by using ~~~ ... ~~~ which can be useful if, for instance, you occasionally want to use a specific layout such as text next to an image:","category":"page"},{"location":"man/syntax/#","page":"Syntax","title":"Syntax","text":"Some text here in the \"standard\" layout then you can inject raw HTML:\n\n~~~\n<div class=\"row\">\n  <div class=\"container\">\n    <img class=\"left\" src=\"/assets/infra/rndimg.jpg\">\n    <p> Marine iguanas are truly splendid creatures. </p>\n    <p> Evolution is cool. </p>\n    <div style=\"clear: both\"></div>      \n  </div>\n</div>\n~~~\n\nand subsequently continue with the standard layout.","category":"page"},{"location":"man/syntax/#","page":"Syntax","title":"Syntax","text":"note: Note\nIn a raw HTML, you cannot use markdown, maths etc. For this reason, it is often preferable to use nested @@divname... blocks instead of raw HTML since those can have markdown, maths, etc. in them. (See also the example generated by newsite.)","category":"page"},{"location":"man/syntax/#Comments-1","page":"Syntax","title":"Comments","text":"","category":"section"},{"location":"man/syntax/#","page":"Syntax","title":"Syntax","text":"You can add comments in your markdown using HTML-like comments: <!-- your comment --> possibly on multiple lines. Note that comments are not allowed in a math environment. So this:","category":"page"},{"location":"man/syntax/#","page":"Syntax","title":"Syntax","text":"Some markdown here $\\sin(\\alpha+\\beta)=\\sin\\alpha\\cos\\beta+\\cos\\alpha\\sin\\beta$ then\n<!--\nTODO: add other formulas\n-->\nand then some more markdown","category":"page"},{"location":"man/syntax/#","page":"Syntax","title":"Syntax","text":"is fine but:","category":"page"},{"location":"man/syntax/#","page":"Syntax","title":"Syntax","text":"$$\n\\exp(i\\pi)+1 = 0 <!-- this is very pretty -->\n$$","category":"page"},{"location":"man/syntax/#","page":"Syntax","title":"Syntax","text":"is not.","category":"page"},{"location":"man/syntax/#LaTeX-commands-1","page":"Syntax","title":"LaTeX commands","text":"","category":"section"},{"location":"man/syntax/#","page":"Syntax","title":"Syntax","text":"JuDoc allows the definition of LaTeX-like commands which can be particularly useful for repeating elements be it in or out of math environments.","category":"page"},{"location":"man/syntax/#","page":"Syntax","title":"Syntax","text":"Definition of commands is as in LaTeX (with the constraint that you must use the \\newcommand{...}[...]{...} format; see examples below).","category":"page"},{"location":"man/syntax/#","page":"Syntax","title":"Syntax","text":"Example 1: a command to get a mathbb R in math environments:","category":"page"},{"location":"man/syntax/#","page":"Syntax","title":"Syntax","text":"\\newcommand{\\R}{\\mathbb R}\n\nLet $f:\\R\\to\\R$ a function...","category":"page"},{"location":"man/syntax/#","page":"Syntax","title":"Syntax","text":"Example 2: a command to get a langle x y rangle in math environments:","category":"page"},{"location":"man/syntax/#","page":"Syntax","title":"Syntax","text":"\\newcommand{\\scal}[1]{\\left\\langle #1 \\right\\rangle}","category":"page"},{"location":"man/syntax/#","page":"Syntax","title":"Syntax","text":"Example 3: a command to change the colour of the text outside of a math environment (note that inside a math environment you can use \\textcolor which is defined in KaTeX; I'm using a different name here so that these two don't clash since commands defined in JuDoc take precedence):","category":"page"},{"location":"man/syntax/#","page":"Syntax","title":"Syntax","text":"\\newcommand{\\col}[2]{~~~ <span style=\"color:#1\">#2</span> ~~~}\n\nAnd then you can use \\col{tomato}{colours} in your text and\n$$x + \\textcolor{blue}{y} + z$$\nin your maths.","category":"page"},{"location":"man/syntax/#","page":"Syntax","title":"Syntax","text":"note: Note\nCommand names should currently only contain letters. This could be relaxed, for instance to allow underscore and numbers (since JuDoc strictly enforces the use of braces around command arguments, it wouldn't be ambiguous). If you think that would be useful, please open an issue.","category":"page"},{"location":"man/syntax/#Nesting-1","page":"Syntax","title":"Nesting","text":"","category":"section"},{"location":"man/syntax/#","page":"Syntax","title":"Syntax","text":"Using commands can be nested –as in LaTeX– and, moreover, you can throw in some judoc markdown. Here is a somewhat more sophisticated example for a \"definition\" environment:","category":"page"},{"location":"man/syntax/#","page":"Syntax","title":"Syntax","text":"\\newcommand{\\definition}[2]{@@definition **Definition**: (_!#1_) #2 @@}\n\n\\definition{angle between vectors}{\n  Let $x, y \\in \\R^n$ denote two real vectors and let $\\scal{\\cdot, \\cdot}$ denote\n  the inner product of two vectors. Then, the angle $\\theta$ between $x$ and $y$ is\n  given by $$ \\cos(\\theta) = {\\scal{x,y}\\over \\scal{x,x} \\scal{y,y}} $$ }","category":"page"},{"location":"man/syntax/#","page":"Syntax","title":"Syntax","text":"with CSS","category":"page"},{"location":"man/syntax/#","page":"Syntax","title":"Syntax","text":".definition {\n    background-color: aliceblue;\n    border-left: 5px solid cornflowerblue;\n    border-radius: 10px;\n    padding: 10px;\n}","category":"page"},{"location":"man/syntax/#","page":"Syntax","title":"Syntax","text":"it will look like","category":"page"},{"location":"man/syntax/#","page":"Syntax","title":"Syntax","text":"(Image: )","category":"page"},{"location":"man/syntax/#","page":"Syntax","title":"Syntax","text":"Of course, you can also nest definitions:","category":"page"},{"location":"man/syntax/#","page":"Syntax","title":"Syntax","text":"\\newcommand{\\norm}[2]{\\left\\|#1\\right\\|_{#2}}\n\\newcommand{\\anorm}[1]{\\norm{#1}{1}}\n\\newcommand{\\bnorm}[1]{\\norm{#1}{2}}\n\nLet $x\\in\\R^n$, there exists $0 < C_1 \\le C_2$ such that\n\n$$ C_1 \\anorm{x} \\le \\bnorm{x} \\le C_2\\anorm{x}. $$","category":"page"},{"location":"man/syntax/#","page":"Syntax","title":"Syntax","text":"where the final equation would look like C_1 x_1 le x_2 le C_2x_1.","category":"page"},{"location":"man/syntax/#Whitespaces-1","page":"Syntax","title":"Whitespaces","text":"","category":"section"},{"location":"man/syntax/#","page":"Syntax","title":"Syntax","text":"In a JuDoc newcommand, to refer to an argument, you can use #1 or !#1. There is a subtle difference: the first one introduces a space left of the argument (this allows to avoid ambiguous commands in general) and the second one does not. In general whitespaces are irrelevant and will not show up and so the usual #1 is the recommended setting. However, there are cases where the whitespace does appear and you don't want it to (e.g. outside a math environment if the command is directly preceded by something). In those cases, and provided there is no ambiguity (e.g.: due to chaining commands), you can use !#1 which will not insert the whitespace. For instance:","category":"page"},{"location":"man/syntax/#","page":"Syntax","title":"Syntax","text":"\\newcommand{\\pathwith}[1]{`/usr/local/bin/#1`}\n\\newcommand{\\pathwithout}[1]{`/usr/local/bin/!#1`}","category":"page"},{"location":"man/syntax/#","page":"Syntax","title":"Syntax","text":"\\pathwith{hello} will give /usr/local/bin/ hello which would be inappropriate whereas\n\\pathwithout{hello} will give usr/local/hello.","category":"page"},{"location":"man/syntax/#Local-vs-global-1","page":"Syntax","title":"Local vs global","text":"","category":"section"},{"location":"man/syntax/#","page":"Syntax","title":"Syntax","text":"The commands you define will be available only within the page you define them in. However, if you would like to define commands that are globally available to all pages, then you should simply put these definitions in src/config.md.","category":"page"},{"location":"man/syntax/#Hyper-references-1","page":"Syntax","title":"Hyper-references","text":"","category":"section"},{"location":"man/syntax/#","page":"Syntax","title":"Syntax","text":"Three types of hyper-references are supported:","category":"page"},{"location":"man/syntax/#","page":"Syntax","title":"Syntax","text":"for display math,\nfor bibliography references,\nfor specific anchor points in the page.","category":"page"},{"location":"man/syntax/#","page":"Syntax","title":"Syntax","text":"The syntax for all three is close to that of standard LaTeX (see below).","category":"page"},{"location":"man/syntax/#","page":"Syntax","title":"Syntax","text":"To style the appearance of the maths or bib links in CSS, use .jd-content.eqref a and .jd-content.bibref a classes; for instance:","category":"page"},{"location":"man/syntax/#","page":"Syntax","title":"Syntax","text":".jd-content .eqref a  {color: blue;}\n.jd-content .bibref a {color: green;}","category":"page"},{"location":"man/syntax/#Equations-1","page":"Syntax","title":"Equations","text":"","category":"section"},{"location":"man/syntax/#","page":"Syntax","title":"Syntax","text":"To label an equation, just use \\label{some label} in the math environment and, to refer to it, use \\eqref{some label}:","category":"page"},{"location":"man/syntax/#","page":"Syntax","title":"Syntax","text":"Some equation:\n\n$$\\exp(i\\pi) + 1 = 0 \\label{a cool equation}$$\n\nand you can refer to it in the text like so, equation \\eqref{a cool equation}.","category":"page"},{"location":"man/syntax/#","page":"Syntax","title":"Syntax","text":"As in LaTeX, you can refer to several equations in one by separating names with commas: \\eqref{some label, some other} (and so you should not use commas in your labels).","category":"page"},{"location":"man/syntax/#Bibliography-1","page":"Syntax","title":"Bibliography","text":"","category":"section"},{"location":"man/syntax/#","page":"Syntax","title":"Syntax","text":"For bibliography references, you can use \\biblabel{short}{name} to indicate a bibliography reference which will appear as a clickable link (name) or name and can be referred to by short:","category":"page"},{"location":"man/syntax/#","page":"Syntax","title":"Syntax","text":"In the text you may refer to \\citep{noether15, bezanson17} while in a bibliography\nsection you would have\n\n* \\biblabel{noether15}{Noether (1915)} **Noether**, Korper und Systeme rationaler Funktionen, 1915.\n* \\biblabel{bezanson17}{Bezanson et al. (2017)} **Bezanson**, **Edelman**, **Karpinski** and **Shah**, [Julia: a fresh approach to numerical computing](https://julialang.org/publications/julia-fresh-approach-BEKS.pdf), SIAM review 2017.","category":"page"},{"location":"man/syntax/#","page":"Syntax","title":"Syntax","text":"The name argument therefore corresponds to how the bibliography reference will appear in the text. In the case above, the text will lead to","category":"page"},{"location":"man/syntax/#","page":"Syntax","title":"Syntax","text":"... refer to (Noether (1915), Bezanson et al. (2017)) while ...","category":"page"},{"location":"man/syntax/#","page":"Syntax","title":"Syntax","text":"You can use","category":"page"},{"location":"man/syntax/#","page":"Syntax","title":"Syntax","text":"\\cite{short1, short2} or \\citet{short3}: will not add parentheses around the link(s),\n\\citep{short4, short5}: will add parentheses around the link(s).","category":"page"},{"location":"man/syntax/#","page":"Syntax","title":"Syntax","text":"As in LaTeX, if the reference is undefined, the command will be replaced by (??).","category":"page"},{"location":"man/syntax/#","page":"Syntax","title":"Syntax","text":"note: Note\nIn the future, there may be a possibility to define specific bibliography styles. I've not yet come around to it but feel free to open an issue if you would like this or would like to suggest a way to do it.","category":"page"},{"location":"man/syntax/#Anchor-points-1","page":"Syntax","title":"Anchor points","text":"","category":"section"},{"location":"man/syntax/#","page":"Syntax","title":"Syntax","text":"You can specify anchor points on the page by using \\label{name of the anchor} anywhere on the page outside of maths environment. This will insert an anchor:","category":"page"},{"location":"man/syntax/#","page":"Syntax","title":"Syntax","text":"<a id=\"name-of-the-anchor\"></a>","category":"page"},{"location":"man/syntax/#","page":"Syntax","title":"Syntax","text":"You can subsequently add a link to it on the same page:","category":"page"},{"location":"man/syntax/#","page":"Syntax","title":"Syntax","text":"[link to it](#name-of-the-anchor)","category":"page"},{"location":"man/syntax/#","page":"Syntax","title":"Syntax","text":"or from another page by prepending it with the path to the page, for instance:","category":"page"},{"location":"man/syntax/#","page":"Syntax","title":"Syntax","text":"[link to it](/index.html#name-of-the-anchor)","category":"page"},{"location":"man/syntax/#","page":"Syntax","title":"Syntax","text":"Note also that all section headers are anchor points for instance","category":"page"},{"location":"man/syntax/#","page":"Syntax","title":"Syntax","text":"### Some subtitle","category":"page"},{"location":"man/syntax/#","page":"Syntax","title":"Syntax","text":"can be linked to with #some-subtitle.","category":"page"},{"location":"man/syntax/#","page":"Syntax","title":"Syntax","text":"note: Note\nIn the future, a number will be appended to anchor-points corresponding to section headers so that if you have two headers with the same name, the links can be differentiated (issue #180). (Same as Documenter.jl.)","category":"page"},{"location":"man/syntax/#Code-insertions-1","page":"Syntax","title":"Code insertions","text":"","category":"section"},{"location":"man/syntax/#","page":"Syntax","title":"Syntax","text":"As per Common Mark specifications, you have multiple ways of inserting code:","category":"page"},{"location":"man/syntax/#","page":"Syntax","title":"Syntax","text":"inline code: you can use single backticks (`) or double backticks (``) (if the code contains single ticks) like so:","category":"page"},{"location":"man/syntax/#","page":"Syntax","title":"Syntax","text":"This is some `inline code` or ``inline ` code with a tick``.","category":"page"},{"location":"man/syntax/#","page":"Syntax","title":"Syntax","text":"code blocks: it is recommended to use triple backticks (```) optionally followed by a language name for highlighting like so:","category":"page"},{"location":"man/syntax/#","page":"Syntax","title":"Syntax","text":"This is some julia code:\n```julia\na = 2\n@show a\n```","category":"page"},{"location":"man/syntax/#","page":"Syntax","title":"Syntax","text":"code blocks 2: you can also use indented code blocks (lines starting with four spaces or a tab) (but fenced code blocks should be preferred)","category":"page"},{"location":"man/syntax/#","page":"Syntax","title":"Syntax","text":"This is some code:\n\n    a = 2\n    @show a","category":"page"},{"location":"man/syntax/#","page":"Syntax","title":"Syntax","text":"Note: when either using indented code blocks or using fenced code blocks with no language name, then the code language for highlighting can be specified with the local page variable lang i.e. @def lang = \"julia\" (which is the default) or @def lang = \"\" if you don't want the code to be highlighted.","category":"page"},{"location":"man/syntax/#","page":"Syntax","title":"Syntax","text":"Sometimes, when presenting code in a post, you would like to make sure the code works and it can be annoying to have to copy-paste it around then copy its output, especially if you decide to make modifications on the way in which case you have to repeat the process.","category":"page"},{"location":"man/syntax/#","page":"Syntax","title":"Syntax","text":"In JuDoc there are two ways to do this.","category":"page"},{"location":"man/syntax/#","page":"Syntax","title":"Syntax","text":"For Julia code, a live-evaluation of code blocks is supported not unlike the Weave.jl package,\nFor all languages, you can run the script separately and insert the code and/or the output of the code in the page.","category":"page"},{"location":"man/syntax/#On-the-fly-evaluation-1","page":"Syntax","title":"On-the-fly evaluation","text":"","category":"section"},{"location":"man/syntax/#","page":"Syntax","title":"Syntax","text":"note: Note\nEvaluation time: it is important to realise that when the code block is created or modified and the page is saved, it will trigger a page compilation that will wait for the evaluation of the code block to complete. So if your code block takes a long time to execute, the page will not be updated before that's done. That being said, if you don't modify the code block, it will only be executed once as the output is saved to file.","category":"page"},{"location":"man/syntax/#","page":"Syntax","title":"Syntax","text":"note: Note\nSandboxing: on-the-fly evaluation of code blocks is still a bit experimental. Among other things, the code is not sandboxed which means that if you have two code blocks one after the other, the second one has access to what's defined in the first. This is natural within the same page, but it also works across pages. However, it would be really bad practice to rely on this as the order in which pages are compiled is not always the same. In short: take a page as a Julia notebook and make sure all your variables and functions you use are defined on that page.","category":"page"},{"location":"man/syntax/#","page":"Syntax","title":"Syntax","text":"Code blocks that should not be evaluated should be added as per standard markdown, so for instance:","category":"page"},{"location":"man/syntax/#","page":"Syntax","title":"Syntax","text":"```julia\na = 10\n```","category":"page"},{"location":"man/syntax/#","page":"Syntax","title":"Syntax","text":"Code blocks that should be evaluated should be added with julia:path/to/script where path/to/script indicates where the script corresponding to the code block will be saved (note: the given path must be in UNIX format even if you're using Windows)","category":"page"},{"location":"man/syntax/#","page":"Syntax","title":"Syntax","text":"```julia:./code/ex1\na = 10\n@show a\n```","category":"page"},{"location":"man/syntax/#","page":"Syntax","title":"Syntax","text":"What this will do is:","category":"page"},{"location":"man/syntax/#","page":"Syntax","title":"Syntax","text":"write the code to the file /assets/[subpath]/code/ex1.jl\nrun the code and capture its output (STDOUT) and write it to /assets/[subpath]/code/output/ex1.out","category":"page"},{"location":"man/syntax/#","page":"Syntax","title":"Syntax","text":"The [subpath] here is the exact same sub-path structure than to the page where the code block is inserted. To clarify, let's say you wrote the above code-block in","category":"page"},{"location":"man/syntax/#","page":"Syntax","title":"Syntax","text":"/src/pages/folder1/page1.md","category":"page"},{"location":"man/syntax/#","page":"Syntax","title":"Syntax","text":"then with the syntax above, the script will be saved in","category":"page"},{"location":"man/syntax/#","page":"Syntax","title":"Syntax","text":"/assets/pages/folder1/code/ex1.jl","category":"page"},{"location":"man/syntax/#More-on-paths-1","page":"Syntax","title":"More on paths","text":"","category":"section"},{"location":"man/syntax/#","page":"Syntax","title":"Syntax","text":"There are three ways you can specify where the script corresponding to a code-block should be saved.","category":"page"},{"location":"man/syntax/#","page":"Syntax","title":"Syntax","text":"relative to the page: ./[p]/script is as above, it will write the code block to /assets/[subpath]/p/script.jl where subpath corresponds to the sub-path of the page where the code block is inserted (path below /src/)\nrelative to the assets dir: p/script will write the code block to /assets/p/script.jl\nfull path: /p/script will write the code block to /p/script.jl","category":"page"},{"location":"man/syntax/#","page":"Syntax","title":"Syntax","text":"Note: when code blocks are evaluated, their output (STDOUT) is captured and saved at [path]/output/script.out where [path] is what precedes script.jl in the cases above.","category":"page"},{"location":"man/syntax/#Inserting-the-output-1","page":"Syntax","title":"Inserting the output","text":"","category":"section"},{"location":"man/syntax/#","page":"Syntax","title":"Syntax","text":"Let's say you've added the following code block:","category":"page"},{"location":"man/syntax/#","page":"Syntax","title":"Syntax","text":"```julia:./code_pg1/ex1\nusing LinearAlgebra\na = [1, 2, 3]\n@show dot(a, a)\n```","category":"page"},{"location":"man/syntax/#","page":"Syntax","title":"Syntax","text":"In order to show the raw output, just write","category":"page"},{"location":"man/syntax/#","page":"Syntax","title":"Syntax","text":"\\output{./code_pg1/ex1}","category":"page"},{"location":"man/syntax/#","page":"Syntax","title":"Syntax","text":"which in the present example will introduce exactly the following HTML","category":"page"},{"location":"man/syntax/#","page":"Syntax","title":"Syntax","text":"<pre><code class=\"language-julia\">dot(a, a) = 14</code></pre>","category":"page"},{"location":"man/syntax/#","page":"Syntax","title":"Syntax","text":"and will look like","category":"page"},{"location":"man/syntax/#","page":"Syntax","title":"Syntax","text":"dot(a, a) = 14","category":"page"},{"location":"man/syntax/#","page":"Syntax","title":"Syntax","text":"If you now change the vector a in the code block, the page will be re-compiled with the code-block re-evaluated and the new output will be shown.","category":"page"},{"location":"man/syntax/#","page":"Syntax","title":"Syntax","text":"If you would like the output to appear as text (not a code block), you can use \\textoutput instead. Here's an example:","category":"page"},{"location":"man/syntax/#","page":"Syntax","title":"Syntax","text":"```julia:./code_pg1/ex2\nusing Statistics\ntemps = (15, 15, 14, 16, 18, 19, 20, 12, 10, 24)\nprintln(\"The _average_ temperature is **$(mean(temps))°C**.\")\n```\n\\textoutput{./code_pg1/ex2}","category":"page"},{"location":"man/syntax/#","page":"Syntax","title":"Syntax","text":"Which will appear as:","category":"page"},{"location":"man/syntax/#","page":"Syntax","title":"Syntax","text":"using Statistics\ntemps = (15, 15, 14, 16, 18, 19, 20, 12, 10, 24)\nprintln(\"The _average_ temperature is **$(mean(temps))°C**.\")","category":"page"},{"location":"man/syntax/#","page":"Syntax","title":"Syntax","text":"The average temperature is 16.3°C.","category":"page"},{"location":"man/syntax/#Hiding-lines-1","page":"Syntax","title":"Hiding lines","text":"","category":"section"},{"location":"man/syntax/#","page":"Syntax","title":"Syntax","text":"Sometimes you may want to run some lines but hide them from the presentation, for this just use # hide at the end of the line (hide is not case sensitive so # HiDe would be fine too):","category":"page"},{"location":"man/syntax/#","page":"Syntax","title":"Syntax","text":"```julia:./code_pg1/ex1\nusing LinearAlgebra # hide\na = [1, 2, 3]\n@show dot(a, a)\n```","category":"page"},{"location":"man/syntax/#","page":"Syntax","title":"Syntax","text":"You could also hide the entire code block if you only care about the output, for this put a # hideall on any line:","category":"page"},{"location":"man/syntax/#","page":"Syntax","title":"Syntax","text":"```julia:./code_pg1/ex2\n#hideall\nusing Statistics\ntemps = (15, 15, 14, 16, 18, 19, 20, 12, 10, 24)\nprintln(\"The _average_ temperature is **$(mean(temps))°C**.\")\n```\n\\textoutput{./code_pg1/ex2}","category":"page"},{"location":"man/syntax/#","page":"Syntax","title":"Syntax","text":"Which will appear as just:","category":"page"},{"location":"man/syntax/#","page":"Syntax","title":"Syntax","text":"The average temperature is 16.3°C.","category":"page"},{"location":"man/syntax/#Separate-evaluation-1","page":"Syntax","title":"Separate evaluation","text":"","category":"section"},{"location":"man/syntax/#","page":"Syntax","title":"Syntax","text":"The philosophy here is:","category":"page"},{"location":"man/syntax/#","page":"Syntax","title":"Syntax","text":"keep your code snippets in appropriate subfolders of /assets/ where they can be run and their output can be saved, this can be compared to a test/ folder in a Julia package,\nrun some or all of the snippets (before running JuDoc),\nuse \\input{...}{...} in your markdown (see below) and when the website is updated, it will plug-in the most recent parts that have been generated.","category":"page"},{"location":"man/syntax/#","page":"Syntax","title":"Syntax","text":"That way, if you modify the code, everything will be updated on the website too while ensuring that the code actually runs and generates the output you're displaying.","category":"page"},{"location":"man/syntax/#","page":"Syntax","title":"Syntax","text":"Again, the script files can contain # hide at the end of lines you do not want to show.","category":"page"},{"location":"man/syntax/#","page":"Syntax","title":"Syntax","text":"The generate_results.jl file should run the scripts and redirect outputs to the assets/[path]/output directory. You can use something like the script below (if you generate an example website with newsite, it's already in there) though you can of course modify it as you wish.","category":"page"},{"location":"man/syntax/#","page":"Syntax","title":"Syntax","text":"dir = @__DIR__\n\"\"\"\n    genplain(s)\n\nSmall helper function to run some code and redirect the output (stdout) to a file.\n\"\"\"\nfunction genplain(s::String)\n    open(joinpath(dir, \"output\", \"$(splitext(s)[1]).out\"), \"w\") do outf\n        redirect_stdout(outf) do\n            include(joinpath(dir, s))\n        end\n    end\nend\n# run `script1.jl` and redirect what it prints to `output/script1.out`\ngenplain(\"script1.jl\")\n# run `script2.jl` which has a savefig(joinpath(@__DIR__, \"output\", \"script2.png\"))\ninclude(\"script2.jl\")","category":"page"},{"location":"man/syntax/#","page":"Syntax","title":"Syntax","text":"The function genplain(\"scriptname.jl\") just redirects the output of the script to output/scriptname.out. So for instance if you have in assets/scripts/script1.jl","category":"page"},{"location":"man/syntax/#","page":"Syntax","title":"Syntax","text":"print(\"hello\")","category":"page"},{"location":"man/syntax/#","page":"Syntax","title":"Syntax","text":"Then genplain(\"script1.jl\") will generate /assets/scripts/output/script1.out with content","category":"page"},{"location":"man/syntax/#","page":"Syntax","title":"Syntax","text":"hello","category":"page"},{"location":"man/syntax/#","page":"Syntax","title":"Syntax","text":"note: Note\nYou could have scripts in any language here (R, Python, ...) as long as the folder structure is the same.","category":"page"},{"location":"man/syntax/#Inserting-code-1","page":"Syntax","title":"Inserting code","text":"","category":"section"},{"location":"man/syntax/#","page":"Syntax","title":"Syntax","text":"In order to insert the code of a script and have it highlighted you can use","category":"page"},{"location":"man/syntax/#","page":"Syntax","title":"Syntax","text":"\\input{julia}{scripts/script1.jl}","category":"page"},{"location":"man/syntax/#","page":"Syntax","title":"Syntax","text":"or \\input{code:julia}{scripts/script1.jl}. This will insert the content of the file /assets/scripts/script1.jl (see also the section earlier on paths) into a block that will be highlighted as julia code.","category":"page"},{"location":"man/syntax/#Plain-text-output-1","page":"Syntax","title":"Plain-text output","text":"","category":"section"},{"location":"man/syntax/#","page":"Syntax","title":"Syntax","text":"In order to insert the plain-text output of a script, you can use","category":"page"},{"location":"man/syntax/#","page":"Syntax","title":"Syntax","text":"\\input{output}{scripts/script1.jl}","category":"page"},{"location":"man/syntax/#","page":"Syntax","title":"Syntax","text":"or \\input{output:plain}{scripts/script1.jl}. This will insert the content of the file /assets/scripts/script1.out into a non-highlighted code-block.","category":"page"},{"location":"man/syntax/#Plot-output-1","page":"Syntax","title":"Plot output","text":"","category":"section"},{"location":"man/syntax/#","page":"Syntax","title":"Syntax","text":"In order to insert a plot generated by a script, you can use","category":"page"},{"location":"man/syntax/#","page":"Syntax","title":"Syntax","text":"\\input{plot}{scripts/script1.jl}","category":"page"},{"location":"man/syntax/#","page":"Syntax","title":"Syntax","text":"or \\input{plot:id}{scripts/script1.jl}. This will look for an image file with root name /assets/scripts/script1.ext where ext is gif, png, jp(e)g, svg. If you use plot:id then it will look for an image file with root name /assets/scripts/script1id.ext.","category":"page"},{"location":"man/syntax/#","page":"Syntax","title":"Syntax","text":"The plot:id option is useful if you have a script that generates several plots for instance.","category":"page"},{"location":"man/syntax/#Slicing-up-1","page":"Syntax","title":"Slicing up","text":"","category":"section"},{"location":"man/syntax/#","page":"Syntax","title":"Syntax","text":"The structure in the generate_results.jl effectively means that all your code is run as one big script. This also means that if you want to slice some of your code in several parts and show intermediate outputs (e.g. plots), well you can just do that by having a script_1_p1.jl, script_1_p2.jl etc. and then just use  \\input multiple times.","category":"page"},{"location":"man/syntax/#File-insertions-1","page":"Syntax","title":"File insertions","text":"","category":"section"},{"location":"man/syntax/#","page":"Syntax","title":"Syntax","text":"A few commands are defined to help you with insertions of content; you can also define your own commands using custom HTML as was discussed before.","category":"page"},{"location":"man/syntax/#Inserting-a-figure-1","page":"Syntax","title":"Inserting a figure","text":"","category":"section"},{"location":"man/syntax/#","page":"Syntax","title":"Syntax","text":"The commands","category":"page"},{"location":"man/syntax/#","page":"Syntax","title":"Syntax","text":"\\figalt{alt}{path}, and\n\\fig{path}","category":"page"},{"location":"man/syntax/#","page":"Syntax","title":"Syntax","text":"are convenient commands to insert figures. Of course you're free to use the default markdown way ![alt](full_path) instead. One difference with these commands though is that they allow the use of relative paths (see the point on paths); this can be convenient in order to organise your assets as you organise your pages.  ","category":"page"},{"location":"man/syntax/#","page":"Syntax","title":"Syntax","text":"Note: as sometimes figures are generated by code, it is sometimes convenient to save them in a path/output/ subfolder. The \\fig and \\figalt will try to look both in path and path/output so that you don't have to think about it. Likewise, if the extension is not provided, JuDoc will try common ones. For instance, all of these will work:","category":"page"},{"location":"man/syntax/#","page":"Syntax","title":"Syntax","text":"```julia:./ex1\nusing PyPlot\nfigure()\nplot([0, 1], [0, 1])\nsavefig(joinpath(@__DIR__, \"output\", \"test.png\"))\n```\n\\fig{./test}\n\\fig{./output/test}\n\\fig{./test.png}","category":"page"},{"location":"man/syntax/#Linking-a-file-1","page":"Syntax","title":"Linking a file","text":"","category":"section"},{"location":"man/syntax/#","page":"Syntax","title":"Syntax","text":"The command","category":"page"},{"location":"man/syntax/#","page":"Syntax","title":"Syntax","text":"\\file{name}{path}","category":"page"},{"location":"man/syntax/#","page":"Syntax","title":"Syntax","text":"is a convenient way to link to a local asset (e.g. a pdf file). Again, you could use the default markdown way [name](full_path) but, as for the fig commands, this allows the use of relative paths.","category":"page"},{"location":"man/syntax/#Inserting-markdown-1","page":"Syntax","title":"Inserting markdown","text":"","category":"section"},{"location":"man/syntax/#","page":"Syntax","title":"Syntax","text":"In some situation, you may have some markdown in a file which you may want to include somewhere else. This can be achieved thanks to the  \\textinput{path} commmand. The path specification is as the other commands, and the text will be formatted.","category":"page"},{"location":"man/syntax/#","page":"Syntax","title":"Syntax","text":"As an example you could have in /assets/ccc/sidefile.md:","category":"page"},{"location":"man/syntax/#","page":"Syntax","title":"Syntax","text":"some **markdown** in a side file.","category":"page"},{"location":"man/syntax/#","page":"Syntax","title":"Syntax","text":"where in /src/index.md:","category":"page"},{"location":"man/syntax/#","page":"Syntax","title":"Syntax","text":"This is the index then \\textinput{ccc/sidefile}","category":"page"},{"location":"man/syntax/#","page":"Syntax","title":"Syntax","text":"and this will be equivalent to just having in /src/index.md:","category":"page"},{"location":"man/syntax/#","page":"Syntax","title":"Syntax","text":"This is the index then some **markdown** in a side file.","category":"page"},{"location":"man/syntax/#","page":"Syntax","title":"Syntax","text":"Note: if you don't specify a file extension, .md is appended to the specified path.","category":"page"},{"location":"man/syntax/#Inserting-a-table-1","page":"Syntax","title":"Inserting a table","text":"","category":"section"},{"location":"man/syntax/#","page":"Syntax","title":"Syntax","text":"You can insert tables directly from CSV files with the \\tableinput{header}{path} command. If you generate the file on-the-fly, you should follow this example:","category":"page"},{"location":"man/syntax/#","page":"Syntax","title":"Syntax","text":"```julia:./tableinput/gen\ntestcsv = \"h1,h2,h3\n152,some string, 1.5f0\n0,another string,2.87\"\nwrite(\"assets/pages/tableinput/testcsv.csv\", testcsv)\n```","category":"page"},{"location":"man/syntax/#","page":"Syntax","title":"Syntax","text":"Then you can insert the table with:","category":"page"},{"location":"man/syntax/#","page":"Syntax","title":"Syntax","text":"\\tableinput{}{./tableinput/testcsv.csv}","category":"page"},{"location":"man/syntax/#","page":"Syntax","title":"Syntax","text":"Which will result in:","category":"page"},{"location":"man/syntax/#","page":"Syntax","title":"Syntax","text":"h1 h2 h3\n152 some string 1.5f0\n0 another string 2.87","category":"page"},{"location":"man/syntax/#","page":"Syntax","title":"Syntax","text":"In this case given no header was specified in the call, a header was generated from the first line in the CSV (here: h1, h2, h3).","category":"page"},{"location":"man/syntax/#","page":"Syntax","title":"Syntax","text":"If your file doesn't have a header, you can specify it in the call:","category":"page"},{"location":"man/syntax/#","page":"Syntax","title":"Syntax","text":"```julia:./tableinput/gen\ntestcsv = \"152,some string, 1.5f0\n0,another string,2.87\"\nwrite(\"assets/pages/tableinput/testcsv2.csv\", testcsv)\n\n\\tableinput{custom h1,custom h2,custom h3}{./tableinput/testcsv2.csv}","category":"page"},{"location":"man/syntax/#","page":"Syntax","title":"Syntax","text":"custom h1 custom h2 custom h3\n152 some string 1.5f0\n0 another string 2.87","category":"page"},{"location":"man/syntax/#","page":"Syntax","title":"Syntax","text":"With the above in mind, you can also include existing CSV files.","category":"page"},{"location":"man/syntax/#","page":"Syntax","title":"Syntax","text":"note: Note\nThe look of the table will be defined by your CSS stylesheet.","category":"page"},{"location":"man/syntax/#","page":"Syntax","title":"Syntax","text":"There's a couple of rules that you have to keep in mind when using the \\tableinput{}{} command:","category":"page"},{"location":"man/syntax/#","page":"Syntax","title":"Syntax","text":"Columns must be separated by a comma (,).\nIf a header is specified, its length must match the number of columns in the file.","category":"page"},{"location":"man/syntax/#Page-variables-1","page":"Syntax","title":"Page variables","text":"","category":"section"},{"location":"man/syntax/#","page":"Syntax","title":"Syntax","text":"Page variables are a way to interact with the HTML templating. In essence, you can define variables in the markdown which can then be called or used in the HTML building blocks that are in src/_html_parts/.","category":"page"},{"location":"man/syntax/#","page":"Syntax","title":"Syntax","text":"note: Note\nPage variables are still somewhat rudimentary and while the syntax for declaring a variable will likely not change, the way they are used will almost certainly be refined in the future (see also Templating).","category":"page"},{"location":"man/syntax/#Local-page-variables-1","page":"Syntax","title":"Local page variables","text":"","category":"section"},{"location":"man/syntax/#","page":"Syntax","title":"Syntax","text":"The syntax to define a page variable in markdown is to write on a new line:","category":"page"},{"location":"man/syntax/#","page":"Syntax","title":"Syntax","text":"@def variable_name = ...","category":"page"},{"location":"man/syntax/#","page":"Syntax","title":"Syntax","text":"where whatever is after the = sign should be a valid Julia expression (Julia will try to parse it and will throw an error if it can't). Multiline definitions are not (yet) allowed but if you have a need for that, please open an issue. The idea is that these variables are likely to be rather simple: strings, bools, ints, dates, ... I don't yet see a usecase for more involved things.","category":"page"},{"location":"man/syntax/#","page":"Syntax","title":"Syntax","text":"Once such a variable is defined you can use it with the templating syntax (see Templating). For instance in your src/index.md you could have","category":"page"},{"location":"man/syntax/#","page":"Syntax","title":"Syntax","text":"@def contributors = \"Chuck Norris\"","category":"page"},{"location":"man/syntax/#","page":"Syntax","title":"Syntax","text":"and in your src/_html_parts/head.html you could have","category":"page"},{"location":"man/syntax/#","page":"Syntax","title":"Syntax","text":"{{isdef contributors}}\nThis page was written with the help of {{fill contributors}}\n{{end}}","category":"page"},{"location":"man/syntax/#","page":"Syntax","title":"Syntax","text":"since contributors is a local page variable that is defined in src/index.md, the corresponding index.html will show \"This page was written with the help of Chuck Norris\"; however on any other page, this will not show (unless, again, you define @def contributors = ... there). See also Templating for how page variables can be used in the HTML.","category":"page"},{"location":"man/syntax/#Default-variables-1","page":"Syntax","title":"Default variables","text":"","category":"section"},{"location":"man/syntax/#","page":"Syntax","title":"Syntax","text":"A few variables are already present and used in the basic templates (you can still modify their value though it has to match the type):","category":"page"},{"location":"man/syntax/#","page":"Syntax","title":"Syntax","text":"Name Accepted types Default value Function\ntitle Nothing, String nothing title of the page (tab name)\nhasmath Bool true if true the KaTeX stylesheet and script will be added to the page\nhascode Bool false if false the highlight stylesheet and script will be added to the page\ndate String, Date, Nothing Date(1) a date variable\nlang String \"julia\" the default language to use for code blocks\nreflinks Bool true whether there may be referred links like like [link][id] and [id]: some/url, turn this to false if your code has patterns like [...]: ... which are not link definitions (see also quirks)","category":"page"},{"location":"man/syntax/#","page":"Syntax","title":"Syntax","text":"Then there are some variables that are automatically assigned and that you should therefore not assign  yourself (but you can use them):","category":"page"},{"location":"man/syntax/#","page":"Syntax","title":"Syntax","text":"Name Type Value Function\njd_ctime Date stat(file).ctime page creation date\njd_mtime Date stat(file).mtime last page modification date","category":"page"},{"location":"man/syntax/#Global-page-variables-1","page":"Syntax","title":"Global page variables","text":"","category":"section"},{"location":"man/syntax/#","page":"Syntax","title":"Syntax","text":"You can also define global page variables by simply putting the definition in the src/config.md file. For instance you may want to have a single main author across all pages and would then write","category":"page"},{"location":"man/syntax/#","page":"Syntax","title":"Syntax","text":"@def author = \"Septimia Zenobia\"","category":"page"},{"location":"man/syntax/#","page":"Syntax","title":"Syntax","text":"in the src/config.md file.","category":"page"},{"location":"man/syntax/#","page":"Syntax","title":"Syntax","text":"You can overwrite global variables in any page by redefining it locally. For instance you could set hasmath globally to false and hascode globally to true and then modify it locally as appropriate.","category":"page"},{"location":"man/syntax/#","page":"Syntax","title":"Syntax","text":"There are also a few pre-defined global variables:","category":"page"},{"location":"man/syntax/#","page":"Syntax","title":"Syntax","text":"Name Accepted types Default value Function\nauthor String, Nothing THE AUTHOR author (e.g. may appear in footer)\ndate_format String U dd, yyyy a valid date format specifier\nprepath String \"\" if the website is meant to be a project website on GitHub for instance corresponding to a repo github.com/username/repo as opposed to github.com/username.github.io, then all url paths should be prepended with repo/ which you can do by specifying @def prepath = \"repo\" (see also hosting the website as a project website)","category":"page"},{"location":"man/templating/#Templating-1","page":"Templating","title":"Templating","text":"","category":"section"},{"location":"man/templating/#","page":"Templating","title":"Templating","text":"This page is about the templating syntax that is used in JuDoc which allows you to have some control over the generated HTML. It can be useful as a way to, depending on the page,","category":"page"},{"location":"man/templating/#","page":"Templating","title":"Templating","text":"adjust the layout,\nspecify elements that should be inserted in the page such as date of last modification, page author(s), etc.,\nspecify auxiliary elements that should be loaded with the page such as stylesheets or javascript libraries,\n...","category":"page"},{"location":"man/templating/#","page":"Templating","title":"Templating","text":"note: Note\nThe templating system is still rudimentary at this point and is likely to be significantly improved over time (your help and suggestions are welcome!).","category":"page"},{"location":"man/templating/#","page":"Templating","title":"Templating","text":"Contents:","category":"page"},{"location":"man/templating/#","page":"Templating","title":"Templating","text":"Basic syntax\nConditional blocks\nBase conditional blocks\nisdef conditional blocks\nispage conditional blocks\nFunction blocks","category":"page"},{"location":"man/templating/#Basic-syntax-1","page":"Templating","title":"Basic syntax","text":"","category":"section"},{"location":"man/templating/#","page":"Templating","title":"Templating","text":"When developing your website, you can define global or local page variables using","category":"page"},{"location":"man/templating/#","page":"Templating","title":"Templating","text":"@def varname = ...","category":"page"},{"location":"man/templating/#","page":"Templating","title":"Templating","text":"either in the src/config.md file  (in which case the variable is global) or in a specific page (in which case the variable is local or overwrites a global one). See also the page on the markdown Syntax.","category":"page"},{"location":"man/templating/#","page":"Templating","title":"Templating","text":"These variables can subsequently be called in \"HTML Blocks\" in a way that is inspired from Hugo's templating system via {{...}}. These blocks would be placed in the  HTML layout building blocks files that are in src/_html_parts/.","category":"page"},{"location":"man/templating/#","page":"Templating","title":"Templating","text":"A simple example is the insertion of a string defining the title of the page (which would appear the tab name). In the markdown of src/path/page1.md you would have:","category":"page"},{"location":"man/templating/#","page":"Templating","title":"Templating","text":"@def title = \"Title for page 1\"","category":"page"},{"location":"man/templating/#","page":"Templating","title":"Templating","text":"and in src/_html_parts/head.html you would have","category":"page"},{"location":"man/templating/#","page":"Templating","title":"Templating","text":"<title>{{fill title}}</title>","category":"page"},{"location":"man/templating/#","page":"Templating","title":"Templating","text":"This HTML block has the form {{function_name a b ...}} where a, b, ... are page variable names. Here the fill function simply tries to find a page variable \"title\" and places its content here so that in the final generated HTML, there would be:","category":"page"},{"location":"man/templating/#","page":"Templating","title":"Templating","text":"<title>Title for page 1</title>","category":"page"},{"location":"man/templating/#","page":"Templating","title":"Templating","text":"See function blocks for additional such functions that can be used.","category":"page"},{"location":"man/templating/#","page":"Templating","title":"Templating","text":"note: Note\nWhitespaces in HTML blocks are irrelevant as long as the different parts are separated by at least one so for instance {{fill title }} or {{ fill   title}} would both be fine.","category":"page"},{"location":"man/templating/#Conditional-blocks-1","page":"Templating","title":"Conditional blocks","text":"","category":"section"},{"location":"man/templating/#","page":"Templating","title":"Templating","text":"It will often be handy to do things in your layout conditional on specific variables. For instance you may want to highlight elements in your navbar depending on which page you're on.","category":"page"},{"location":"man/templating/#","page":"Templating","title":"Templating","text":"Three types of conditional blocks are allowed:","category":"page"},{"location":"man/templating/#","page":"Templating","title":"Templating","text":"a \"classical\" conditional block with if, elseif, else that accepts page variables that have boolean value,\na conditional block that does something provided a variable exists (or not),\na conditional block that does something depending on whether the page is a specific one (or not).","category":"page"},{"location":"man/templating/#","page":"Templating","title":"Templating","text":"note: Note\nNesting of conditional blocks is currently not allowed  but shouldn't be hard to implement and will likely be supported in the future.","category":"page"},{"location":"man/templating/#Base-conditional-blocks-1","page":"Templating","title":"Base conditional blocks","text":"","category":"section"},{"location":"man/templating/#","page":"Templating","title":"Templating","text":"Such blocks have the structure","category":"page"},{"location":"man/templating/#","page":"Templating","title":"Templating","text":"{{if vname1}}\n...\n{{elseif vname2}}\n...\n{{else}}\n...\n{{end}}","category":"page"},{"location":"man/templating/#","page":"Templating","title":"Templating","text":"where the {{elseif ... }} and {{else}} blocks are optional. They work as you would expect: look up the variables vname1 in the currently available page variables, if it doesn't exist an error will be shown and the whole conditional block will be ignored, otherwise the value is retrieved and depending on whether it is true or false the relevant blocks will be executed.","category":"page"},{"location":"man/templating/#","page":"Templating","title":"Templating","text":"As a simple example consider a variable draft which you could use to control the addition of a banner at the top of a page indicating it's still work in progress:","category":"page"},{"location":"man/templating/#","page":"Templating","title":"Templating","text":"in src/pages/pg1.md you would have","category":"page"},{"location":"man/templating/#","page":"Templating","title":"Templating","text":"@def draft = true","category":"page"},{"location":"man/templating/#","page":"Templating","title":"Templating","text":"while in src/_html_parts/head.html you could have","category":"page"},{"location":"man/templating/#","page":"Templating","title":"Templating","text":"{{if draft}}\n<div class=\"draft-banner\" style=\"background-color:red;\ncolor:white;padding:10px;font-weight:bold;\">\n    This is currently work in progress!\n</div>\n{{end}}","category":"page"},{"location":"man/templating/#isdef-conditional-blocks-1","page":"Templating","title":"isdef conditional blocks","text":"","category":"section"},{"location":"man/templating/#","page":"Templating","title":"Templating","text":"The {{isdef vname}} or {{isnotdef vname}} are blocks that do something depending on whether a specific variable exists (or not):","category":"page"},{"location":"man/templating/#","page":"Templating","title":"Templating","text":"{{isdef author}}\n...\n{{end}}","category":"page"},{"location":"man/templating/#","page":"Templating","title":"Templating","text":"Such blocks can be useful where you sometimes want something to be defined and sometimes not.","category":"page"},{"location":"man/templating/#","page":"Templating","title":"Templating","text":"For instance, you may want to add a title if the variable title exists: in the markdown you would then either have @def title = ... or not and in the head.html:","category":"page"},{"location":"man/templating/#","page":"Templating","title":"Templating","text":"{{isdef title}}\n<title>{{fill title}}</title>\n{{end}}","category":"page"},{"location":"man/templating/#","page":"Templating","title":"Templating","text":"note: Note\nCurrently these blocks do not accept {{else}} statements but this should be supported in the near future.","category":"page"},{"location":"man/templating/#ispage-conditional-blocks-1","page":"Templating","title":"ispage conditional blocks","text":"","category":"section"},{"location":"man/templating/#","page":"Templating","title":"Templating","text":"The {{ispage path/to/page}} or {{isnotpage path/to/page}} are blocks that do something depending on whether the page is a specific one (or not). For instance in the pure-sm template, in the head.html you will see elements for the side menu with","category":"page"},{"location":"man/templating/#","page":"Templating","title":"Templating","text":"<li class=\"pure-menu-item {{ispage index.html}}pure-menu-selected{{end}}\">\n    <a href=\"/\" class=\"pure-menu-link\">Home</a>\n</li>","category":"page"},{"location":"man/templating/#","page":"Templating","title":"Templating","text":"which add a class to a <li> object depending on the page that indicate which list item should be styled as a \"selected\" button depending on the page we're on.","category":"page"},{"location":"man/templating/#","page":"Templating","title":"Templating","text":"note: Note\nAs for the def blocks above, these blocks do not yet accept {{else}} statements.","category":"page"},{"location":"man/templating/#Function-blocks-1","page":"Templating","title":"Function blocks","text":"","category":"section"},{"location":"man/templating/#","page":"Templating","title":"Templating","text":"These are blocks of the form","category":"page"},{"location":"man/templating/#","page":"Templating","title":"Templating","text":"{{f_name p1 p2}}","category":"page"},{"location":"man/templating/#","page":"Templating","title":"Templating","text":"where f_name is a function name (see below) and p1, p2 would be variable names that correspond to arguments of the function.","category":"page"},{"location":"man/templating/#","page":"Templating","title":"Templating","text":"Name #params Example Role\nfill 1 {{fill author}} replaces the block with the value of the page variable\ninsert 1 {{insert path/to/file}} replaces the block with the content of the file at path/to/file","category":"page"},{"location":"man/templating/#","page":"Templating","title":"Templating","text":"note: Note\nIf you would like to have more of those, please open an issue and explain the use-case, I'll be happy to expand the list.","category":"page"},{"location":"man/themes/#Themes-1","page":"Themes","title":"Themes","text":"","category":"section"},{"location":"man/themes/#","page":"Themes","title":"Themes","text":"The pre-defined themes/templates that are currently available can be viewed <a href=\"https://tlienart.github.io/JuDocTemplates.jl/\" target=\"_blank\" rel=\"noopener noreferrer\">here</a> (opens in a new tab).","category":"page"},{"location":"man/themes/#","page":"Themes","title":"Themes","text":"In this section, you will learn how to build a layout from one online. It should also help clarify the structure of the files that define the layout. If you end up doing this yourself and assuming you're happy with the result, a PR to JuDocTemplates would be very welcome!","category":"page"},{"location":"man/themes/#Adapting-a-theme-to-JuDoc-1","page":"Themes","title":"Adapting a theme to JuDoc","text":"","category":"section"},{"location":"man/themes/#","page":"Themes","title":"Themes","text":"As an example, I'll take Jemdoc's site both because it's a pretty simple layout and as a way to honour its legacy since JuDoc was inspired from it.","category":"page"},{"location":"man/themes/#","page":"Themes","title":"Themes","text":"Jemdoc's layout looks like this:","category":"page"},{"location":"man/themes/#","page":"Themes","title":"Themes","text":"(Image: )","category":"page"},{"location":"man/themes/#Getting-started-1","page":"Themes","title":"Getting started","text":"","category":"section"},{"location":"man/themes/#","page":"Themes","title":"Themes","text":"In order to get a blueprint for the folder etc, let's first create a site according to the basic template:","category":"page"},{"location":"man/themes/#","page":"Themes","title":"Themes","text":"julia> newsite(\"jemdoc\", template=\"basic\")","category":"page"},{"location":"man/themes/#","page":"Themes","title":"Themes","text":"You can serve the site in order to see the modifications directly in your browser which can be useful to fine tune the port of the layout.","category":"page"},{"location":"man/themes/#","page":"Themes","title":"Themes","text":"We will need to provide the appropriate stylesheet in src/_css and adjust the layout part in src/_html_parts.","category":"page"},{"location":"man/themes/#Adapting-the-head-and-foot-1","page":"Themes","title":"Adapting the head and foot","text":"","category":"section"},{"location":"man/themes/#","page":"Themes","title":"Themes","text":"The file src/_html_parts/head.html is the most important one you will have to adjust.","category":"page"},{"location":"man/themes/#","page":"Themes","title":"Themes","text":"Let us first change the name of the main stylesheet src/_css/basic.css into src/_css/jemdoc.css which is more appropriate. The reference to the stylesheet in head.html consequently has to be changed to mention jemdoc.css instead of basic.css:","category":"page"},{"location":"man/themes/#","page":"Themes","title":"Themes","text":"<link rel=\"stylesheet\" href=\"/css/jemdoc.css\">","category":"page"},{"location":"man/themes/#","page":"Themes","title":"Themes","text":"The steps here subsequently quite simple:","category":"page"},{"location":"man/themes/#","page":"Themes","title":"Themes","text":"look at the original html code\ncopy whatever comes before the content into head.html","category":"page"},{"location":"man/themes/#","page":"Themes","title":"Themes","text":"Let's do this gradually. The top of the original HTML can be ignored at this point so we can start modifying starting after </head>.","category":"page"},{"location":"man/themes/#","page":"Themes","title":"Themes","text":"Jemdoc's body starts with a Google analytics script which I'll ignore as well. We then have effectively one big table element. Stripped from its content and simplified it looks like:","category":"page"},{"location":"man/themes/#","page":"Themes","title":"Themes","text":"<table id=\"tlayout\">\n  <tr valign=\"top\">\n    <td id=\"layout-menu\">\n      <div class=\"menu-category\">jemdoc</div>\n      <div class=\"menu-item\"><a href=\"index.html\" class=\"current\">home</a></div>\n    <div class=\"menu-category\">topics</div>\n      <div class=\"menu-item\"><a href=\"/pub/menu1.html\">Menu 1</a></div>\n      <div class=\"menu-item\"><a href=\"/pub/menu2.html\">Menu 2</a></div>\n      <div class=\"menu-item\"><a href=\"/pub/menu3.html\">Menu 3</a></div>\n    </td>\n    <td id=\"layout-content\">\n      <p> CONTENT HERE </p>\n      <div id=\"footer\">\n        <div id=\"footer-text\">\n          Page generated by <a href=\"http://jemdoc.jaboc.net/\">jemdoc</a>.\n        </div>\n      </div>\n    </td>\n  </tr>\n</table>","category":"page"},{"location":"man/themes/#","page":"Themes","title":"Themes","text":"Note that I've already filled in the href= in the links to sub-menus.","category":"page"},{"location":"man/themes/#","page":"Themes","title":"Themes","text":"The \"CONTENT HERE\" part is where what JuDoc generates from Markdown will go. Therefore, anything that is after that should go in foot.html; in our current case:","category":"page"},{"location":"man/themes/#","page":"Themes","title":"Themes","text":"      <div id=\"footer\">\n        <div id=\"footer-text\">\n          Page generated by <a href=\"http://jemdoc.jaboc.net/\">jemdoc</a>.\n        </div>\n      </div>\n    </td>\n  </tr>\n</table>","category":"page"},{"location":"man/themes/#","page":"Themes","title":"Themes","text":"That's basically it (though we still have to modify the stylesheet of course). The head.html should be adapted to:","category":"page"},{"location":"man/themes/#","page":"Themes","title":"Themes","text":"<!doctype html>\n<html lang=\"en\">\n<head>\n  <meta charset=\"UTF-8\">\n  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\n  {{if hasmath}} {{insert head_katex.html }}     {{end}}\n  {{if hascode}} {{insert head_highlight.html }}   {{end}}\n  <link rel=\"stylesheet\" href=\"/css/judoc.css\">\n  <link rel=\"stylesheet\" href=\"/css/jemdoc.css\">\n  <link rel=\"icon\" href=\"/assets/infra/favicon.png\">\n  {{isdef title}} <title>{{fill title}}</title>  {{end}}\n</head>\n<body>\n  <table id=\"tlayout\">\n    <tr valign=\"top\">\n      <td id=\"layout-menu\">\n        <div class=\"menu-category\">jemdoc</div>\n        <div class=\"menu-item\"><a href=\"index.html\" class=\"current\">home</a></div>\n      <div class=\"menu-category\">topics</div>\n        <div class=\"menu-item\"><a href=\"/pub/menu1.html\">Menu 1</a></div>\n        <div class=\"menu-item\"><a href=\"/pub/menu2.html\">Menu 2</a></div>\n        <div class=\"menu-item\"><a href=\"/pub/menu3.html\">Menu 3</a></div>\n      </td>\n      <td id=\"layout-content\">\n\n<!-- Content appended here -->","category":"page"},{"location":"man/themes/#","page":"Themes","title":"Themes","text":"and the foot.html should be adapted to:","category":"page"},{"location":"man/themes/#","page":"Themes","title":"Themes","text":"<!-- CONTENT ENDS HERE -->\n        </td>\n      </tr>\n    </table>\n    {{ if hasmath }}\n        {{ insert foot_katex.html }}\n    {{ end }}\n    {{ if hascode }}\n        {{ insert foot_highlight.html }}\n    {{ end }}\n  </body>\n</html>","category":"page"},{"location":"man/themes/#Adapting-the-stylesheet-1","page":"Themes","title":"Adapting the stylesheet","text":"","category":"section"},{"location":"man/themes/#","page":"Themes","title":"Themes","text":"Of course by now the page looks horrendous:","category":"page"},{"location":"man/themes/#","page":"Themes","title":"Themes","text":"(Image: )","category":"page"},{"location":"man/themes/#","page":"Themes","title":"Themes","text":"the content is not centred in its box and overflows on the right, the menu looks ridiculous, time to do some CSS styling!","category":"page"},{"location":"man/themes/#","page":"Themes","title":"Themes","text":"Let's start by removing everything from src/_css/jemdoc.css. Most of what's in there was used for the styling of the top navbar which we don't have anymore (note that the styling of the content itself is in judoc.css, don't change that for now; note also that jemdoc.css is loaded after judoc.css so that you can overwrite the styles there).","category":"page"},{"location":"man/themes/#","page":"Themes","title":"Themes","text":"Let's now just copy paste the content of the two original stylesheets into ours and hope for the best, we may have some fine-tuning to do after this.","category":"page"},{"location":"man/themes/#","page":"Themes","title":"Themes","text":"Doing nothing else than copy pasting already starts to look quite civilised:","category":"page"},{"location":"man/themes/#","page":"Themes","title":"Themes","text":"(Image: )","category":"page"},{"location":"man/themes/#","page":"Themes","title":"Themes","text":"but a few small things should be fixed:","category":"page"},{"location":"man/themes/#","page":"Themes","title":"Themes","text":"there's too little space at the top\nthe menu is a bit too narrow and there's a bit too much space between the menu and the content\nthere's not enough space after <pre> blocks","category":"page"},{"location":"man/themes/#Fixing-spacing-1","page":"Themes","title":"Fixing spacing","text":"","category":"section"},{"location":"man/themes/#","page":"Themes","title":"Themes","text":"Firefox or Chrome/ium's excellent dev-tools are super helpful to fine tune stylesheets. Here things are pretty straightforward though.","category":"page"},{"location":"man/themes/#","page":"Themes","title":"Themes","text":"Firstly we need to add vertical padding above <h1> level title:","category":"page"},{"location":"man/themes/#","page":"Themes","title":"Themes","text":"h1 { padding-top: 2em; }","category":"page"},{"location":"man/themes/#","page":"Themes","title":"Themes","text":"Then, let's widen the menu a little","category":"page"},{"location":"man/themes/#","page":"Themes","title":"Themes","text":"td#layout-menu {\n  padding-left: 15px;\n  padding-right: 25px;\n}","category":"page"},{"location":"man/themes/#","page":"Themes","title":"Themes","text":"and let's reduce the padding on the left of the jd-content element:","category":"page"},{"location":"man/themes/#","page":"Themes","title":"Themes","text":".jd-content { padding-left: 5%; }","category":"page"},{"location":"man/themes/#","page":"Themes","title":"Themes","text":"Thirdly, in the original stylesheet there is this element:","category":"page"},{"location":"man/themes/#","page":"Themes","title":"Themes","text":"pre {\n  padding: 0;\n  margin: 0;\n}","category":"page"},{"location":"man/themes/#","page":"Themes","title":"Themes","text":"which you can just remove to have a bit more space around code blocks.","category":"page"},{"location":"man/themes/#","page":"Themes","title":"Themes","text":"There's probably still things that could be done to improve the layout overall (and make it more responsive!) but we'll leave it at that.","category":"page"},{"location":"man/themes/#","page":"Themes","title":"Themes","text":"(Image: )","category":"page"},{"location":"man/themes/#Adjusting-other-files-1","page":"Themes","title":"Adjusting other files","text":"","category":"section"},{"location":"man/themes/#","page":"Themes","title":"Themes","text":"Here we don't need to adjust anything else but you could want to adjust the pages in another context:","category":"page"},{"location":"man/themes/#","page":"Themes","title":"Themes","text":"head_highlight, head_katex, foot_highlight and foot_katex are probably best left as they are, they will be appended if need be to pages (see in head and foot the {{if hasmath}} and {{if hascode}} blocks)\npage_foot you may want to change, it defines what goes at the bottom of the .jd-content div.","category":"page"},{"location":"man/themes/#","page":"Themes","title":"Themes","text":"By default page_foot looks like","category":"page"},{"location":"man/themes/#","page":"Themes","title":"Themes","text":"<div class=\"page-foot\">\n  <div class=\"copyright\">\n    &copy; {{ fill author }}. Last modified: {{ fill jd_mtime }}. Website built with <a href=\"https://github.com/tlienart/JuDoc.jl\">JuDoc.jl</a>.\n  </div>\n</div>","category":"page"},{"location":"man/themes/#","page":"Themes","title":"Themes","text":"It should be fairly straightforward to adapt that to your needs.","category":"page"},{"location":"man/themes/#Making-a-PR-to-the-theme-repo-1","page":"Themes","title":"Making a PR to the theme repo","text":"","category":"section"},{"location":"man/themes/#","page":"Themes","title":"Themes","text":"Let's say you've built your own template and are pretty happy with the result and you'd like to share it for other users, great! thanks for being a good citizen.","category":"page"},{"location":"man/themes/#Create-a-new-folder-1","page":"Themes","title":"Create a new folder","text":"","category":"section"},{"location":"man/themes/#","page":"Themes","title":"Themes","text":"Head to the JuDocTemplates.jl repository and make a PR. The key is to keep track of what you've modified and what was left as before so that the repo is not cluttered with copies of the same file.","category":"page"},{"location":"man/themes/#","page":"Themes","title":"Themes","text":"In the example above the following files were changed:","category":"page"},{"location":"man/themes/#","page":"Themes","title":"Themes","text":"head.html and foot.html,\njemdoc.css the stylesheet.","category":"page"},{"location":"man/themes/#","page":"Themes","title":"Themes","text":"The JuDocTemplates repository automatically fills in the gap so you just have to provide the files that have changed. Imitate the structure corresponding to basic:","category":"page"},{"location":"man/themes/#","page":"Themes","title":"Themes","text":".\n└── src\n    ├── _css\n    │   └── basic.css\n    └── _html_parts\n        └── head.html","category":"page"},{"location":"man/themes/#","page":"Themes","title":"Themes","text":"So in the case of jemdoc, I will create a new folder jemdoc in src/templates/ with","category":"page"},{"location":"man/themes/#","page":"Themes","title":"Themes","text":".\n└── src\n    ├── _css\n    │   └── jemdoc.css\n    └── _html_parts\n        ├── foot.html\n        └── head.html","category":"page"},{"location":"man/themes/#Add-your-template-to-the-list-1","page":"Themes","title":"Add your template to the list","text":"","category":"section"},{"location":"man/themes/#","page":"Themes","title":"Themes","text":"Next, you need to indicate the new template in JuDocTemplates.jl by simply adding it to the LIST_OF_TEMPLATES constant.","category":"page"},{"location":"man/themes/#","page":"Themes","title":"Themes","text":"Then, you need to add a description for your template in docs/make.jl (please respect the alphabetical order):","category":"page"},{"location":"man/themes/#","page":"Themes","title":"Themes","text":"\"jemdoc\" => \"\"\"\n            <span class=\"th-name\">jemdoc</span>\n            <p>Simple theme with a side navigation bar, no extra javascript and a simple stylesheet. (Adapted from the original Jemdoc theme.)</p>\n            \"\"\",","category":"page"},{"location":"man/themes/#","page":"Themes","title":"Themes","text":"Lastly you need to take a screenshot of what the template looks like of size 480x480, put it in docs/thumb and adjust docs/index_head.html following the example of the other templates:","category":"page"},{"location":"man/themes/#","page":"Themes","title":"Themes","text":"#jemdoc {\n  background: url(\"thumb/jemdoc.png\");\n  background-size: contain;\n}","category":"page"},{"location":"man/themes/#Check-that-things-work-1","page":"Themes","title":"Check that things work","text":"","category":"section"},{"location":"man/themes/#","page":"Themes","title":"Themes","text":"Finally, you need to check that everything works (which is the first thing I'll do when reviewing your PR). For that: first run the file docs/make.jl; this will generate a website in docs/build then using for instance LiveServer.jl, check the generated website and that the demo corresponding to your template works as expected.","category":"page"},{"location":"man/themes/#","page":"Themes","title":"Themes","text":"And that's it! thanks a lot!","category":"page"},{"location":"man/contrib/#Contributing-1","page":"Contributing","title":"Contributing","text":"","category":"section"},{"location":"man/contrib/#","page":"Contributing","title":"Contributing","text":"Contributions, questions and comments are very welcome. In particular, I can see two main ways you can contribute:","category":"page"},{"location":"man/contrib/#","page":"Contributing","title":"Contributing","text":"use JuDoc, ask questions, report bugs or ask for features by opening issue(s),\nsuggest improvements to the code, html generation, or themes.","category":"page"},{"location":"man/contrib/#","page":"Contributing","title":"Contributing","text":"The first one is self-explanatory, please just check that your issue is somewhat aligned with the Judoc spirit.","category":"page"},{"location":"man/contrib/#","page":"Contributing","title":"Contributing","text":"For the second one, all suggestions will be welcome though I will prioritise help in the following three areas which I believe would make the user experience better:","category":"page"},{"location":"man/contrib/#","page":"Contributing","title":"Contributing","text":"bug fixes,\nerror handling: at the moment the error handling is basic to say the least, anything to would help errors being better/more sensibly handled would be great,\nimproving the templates: the current templates are meant to be simple and easily adjustable but there could be more of them and they may be improved to have better cross-browser support, responsiveness etc. For template improvement, please refer to JuDocTemplates.jl.","category":"page"},{"location":"man/contrib/#JuDoc-spirit-1","page":"Contributing","title":"JuDoc spirit","text":"","category":"section"},{"location":"man/contrib/#","page":"Contributing","title":"Contributing","text":"Some of the key objectives of JuDoc are to have a package that...","category":"page"},{"location":"man/contrib/#","page":"Contributing","title":"Contributing","text":"can be used easily by people who have little experience with web-dev,\nis in Julia, is fast™ for local editing, and can be easily extended,\ngenerates pages that are light and load very quickly.","category":"page"},{"location":"man/contrib/#","page":"Contributing","title":"Contributing","text":"In particular, for the last point, I would favour theme contributions that minimise the use of complex javascript libraries or intricate CSS stylesheets if possible. Beyond trying to avoid the bloated web, I will be more supportive of extensions that avoid intruding on people's privacy. Although it is trivial to plug in elements like Google Analytics, Discourse comments or social media buttons in the templates, it is not done by default for a reason; I'd prefer writing docs that explains how to add those than to add them by default 😅 .","category":"page"},{"location":"man/contrib/#","page":"Contributing","title":"Contributing","text":"If you know of good alternatives, open issues! For instance the GitHub-issues based comment system utterances looks great (but I haven't tried it yet).","category":"page"},{"location":"man/troubleshooting/#Troubleshooting-1","page":"Troubleshooting","title":"Troubleshooting","text":"","category":"section"},{"location":"man/troubleshooting/#","page":"Troubleshooting","title":"Troubleshooting","text":"This page is about some of the known errors you may encounter when using JuDoc and how to deal with them. If you encounter an error that is not mentioned here, then it's probably a bug and it would be great if you could open an issue!","category":"page"},{"location":"man/troubleshooting/#","page":"Troubleshooting","title":"Troubleshooting","text":"Error on interruption\nIOStream error","category":"page"},{"location":"man/troubleshooting/#Error-on-interruption-1","page":"Troubleshooting","title":"Error on interruption","text":"","category":"section"},{"location":"man/troubleshooting/#","page":"Troubleshooting","title":"Troubleshooting","text":"You may (rarely) get an an error thrown at you when interrupting the server with <CTRL>+C, particularly when using Juno. There are a couple of reasons this may happen, both unrelated to JuDoc.","category":"page"},{"location":"man/troubleshooting/#Juno-1","page":"Troubleshooting","title":"Juno","text":"","category":"section"},{"location":"man/troubleshooting/#","page":"Troubleshooting","title":"Troubleshooting","text":"Juno (very rarely) crashes if you coincidentally press <CTRL>+C while Juno is doing something in the background (Juno issue #309).","category":"page"},{"location":"man/troubleshooting/#","page":"Troubleshooting","title":"Troubleshooting","text":"The stacktrace you will see will seem particularly obscure, for instance:","category":"page"},{"location":"man/troubleshooting/#","page":"Troubleshooting","title":"Troubleshooting","text":"InterruptException:\n_string_n at string.jl:60 [inlined]\nStringVector at iobuffer.jl:31 [inlined]\n#IOBuffer#320(::Bool, ::Bool, ::Nothing, ::Bool, ::Int64, ::Int64, ::Type{Base.GenericIOBuffer{Array{UInt8,1}}}) at iobuffer.jl:114\n(...)","category":"page"},{"location":"man/troubleshooting/#","page":"Troubleshooting","title":"Troubleshooting","text":"or","category":"page"},{"location":"man/troubleshooting/#","page":"Troubleshooting","title":"Troubleshooting","text":"julia> \"miniERROR: InterruptException:\nStacktrace:\n [1] poptaskref(::Base.InvasiveLinkedListSynchronized{Task}) at ./task.jl:564\n [2] wait() at ./task.jl:591\n(...)","category":"page"},{"location":"man/troubleshooting/#","page":"Troubleshooting","title":"Troubleshooting","text":"Solution: ignore the error, restart Julia.","category":"page"},{"location":"man/troubleshooting/#Not-Juno-1","page":"Troubleshooting","title":"Not-Juno","text":"","category":"section"},{"location":"man/troubleshooting/#","page":"Troubleshooting","title":"Troubleshooting","text":"The LiveServer.jl package, which handles the live-serving of the files, is based upon HTTP.jl. The latter has a fairly complex codebase with a number of asynchronous tasks and is known to sometimes crash in (somewhat) mysterious ways.","category":"page"},{"location":"man/troubleshooting/#","page":"Troubleshooting","title":"Troubleshooting","text":"If the stacktrace mentions uv_write, uv_write_async, libuv or something of the sorts, then this is it.","category":"page"},{"location":"man/troubleshooting/#","page":"Troubleshooting","title":"Troubleshooting","text":"Like the \"Juno\" case, these errors are caused when you happen to press interrupt just as the package was doing something important in the background. This is very rare but can happen and you can safely ignore it.","category":"page"},{"location":"man/troubleshooting/#","page":"Troubleshooting","title":"Troubleshooting","text":"Solution: ignore the error, restart Julia.","category":"page"},{"location":"man/troubleshooting/#IOStream-error-1","page":"Troubleshooting","title":"IOStream error","text":"","category":"section"},{"location":"man/troubleshooting/#","page":"Troubleshooting","title":"Troubleshooting","text":"See the comment about HTTP.jl in the subsection above.","category":"page"},{"location":"lib/design/#Design-1","page":"Design","title":"Design","text":"","category":"section"},{"location":"lib/design/#","page":"Design","title":"Design","text":"This page aims to shed some light on how JuDoc works and how the code is structured which could be of interest for anyone willing to contribute to the codebase.","category":"page"},{"location":"lib/design/#Big-Picture-1","page":"Design","title":"Big Picture","text":"","category":"section"},{"location":"lib/design/#Compilation-1","page":"Design","title":"Compilation","text":"","category":"section"},{"location":"lib/design/#","page":"Design","title":"Design","text":"The overarching sequence for the initial full pass is:","category":"page"},{"location":"lib/design/#","page":"Design","title":"Design","text":"retrieve the paths to files that should be processed (JuDoc.jd_setup),\nprocess all files (JuDoc.jd_fullpass)\nif it's a markdown file convert it to HTML (see below),\nplace generated file in appropriate locations.","category":"page"},{"location":"lib/design/#","page":"Design","title":"Design","text":"In general the user will use serve() which triggers a full pass followed by a loop that re-processes files individually upon modifications (JuDoc.jd_loop).","category":"page"},{"location":"lib/design/#File-processing-1","page":"Design","title":"File processing","text":"","category":"section"},{"location":"lib/design/#","page":"Design","title":"Design","text":"The file processing is controlled by the function JuDoc.process_file which, itself, is a thin wrapper around the function JuDoc.process_file_err (the first one processes any errors that may be generated during the processing of files). There are three types of files:","category":"page"},{"location":"lib/design/#","page":"Design","title":"Design","text":"markdown files (.md) which are parsed and converted into HTML,\nHTML files (.html) which are parsed and re-generated after solving any templating commands they may contain,\nother files which are just copied over to the relevant location.","category":"page"},{"location":"lib/design/#","page":"Design","title":"Design","text":"In the case of markdown files, the function JuDoc.write_page is called and is formed of 3 key stages:","category":"page"},{"location":"lib/design/#","page":"Design","title":"Design","text":"parsing of the markdown (JuDoc.convert_md)\nconversion to HTML and assembly of different blocks into one page (JuDoc.convert_html and JuDoc.build_page),\nwriting the HTML in the appropriate location, possibly after pre-rendering javascript (JuDoc.js_prerender_katex, JuDoc.js_prerender_highlight).","category":"page"},{"location":"lib/design/#Parsing-1","page":"Design","title":"Parsing","text":"","category":"section"},{"location":"lib/design/#","page":"Design","title":"Design","text":"note: Note\nIf you wonder why I didn't just use a \"standard parser\", one of my personal goal was to try to build a parser from scratch to get an idea of how one would work. I don't doubt better can be done though I doubt it's a serious bottleneck at the moment.","category":"page"},{"location":"lib/design/#","page":"Design","title":"Design","text":"At the very basic level, the parser reads the content from left to right and tries to find \"blocks\" that should be processed in a specific way. Once blocks have been found, each block gets processed in turn following the appropriate order in which they appear. Finally, they are re-assembled after processing.","category":"page"},{"location":"lib/design/#","page":"Design","title":"Design","text":"The overarching block type is the JuDoc.AbstractBlock with as key sub-types Token and OCBlock:","category":"page"},{"location":"lib/design/#","page":"Design","title":"Design","text":"JuDoc.Token: these correspond to the idea of a specific sequence of characters which typically will denote the start or the end of an environment. The type contains a substring corresponding to the matched token and a name indicating what the token is.","category":"page"},{"location":"lib/design/#","page":"Design","title":"Design","text":"julia> s = raw\"Hello, $x=5$ end\";\njulia> t = JuDoc.find_tokens(s, JuDoc.MD_TOKENS, JuDoc.MD_1C_TOKENS)\n2-element Array{JuDoc.Token,1}:\n JuDoc.Token(:MATH_A, \"\\$\")\n JuDoc.Token(:MATH_A, \"\\$\")\n\njulia> JuDoc.from(t[1])\n8\njulia> JuDoc.from(t[1])\n12","category":"page"},{"location":"lib/design/#","page":"Design","title":"Design","text":"JuDoc.OCBlock: these correspond to the idea of an environment delimited by an opening and a closing token. The type contains a substring corresponding to the full block, a name indicating what the environment is and a pair of opening and closing tokens (whence the name \"O/C\").","category":"page"},{"location":"lib/design/#","page":"Design","title":"Design","text":"julia> ocb, _ = JuDoc.find_all_ocblocks(t, JuDoc.MD_OCB_ALL);\njulia> ocb\n1-element Array{JuDoc.OCBlock,1}:\n JuDoc.OCBlock(:MATH_A, JuDoc.Token(:MATH_A, \"\\$\") => JuDoc.Token(:MATH_A, \"\\$\"), \"\\$x=5\\$\", false)\n\njulia> JuDoc.from(ocb[1])\n8\n\njulia> JuDoc.to(ocb[2])\n12","category":"page"},{"location":"lib/design/#Finding-Tokens-1","page":"Design","title":"Finding Tokens","text":"","category":"section"},{"location":"lib/design/#","page":"Design","title":"Design","text":"The function JuDoc.find_tokens takes content, reads it from left to right and returns a list of Tokens. It takes a string, and two \"token dictionaries\". The first one describes tokens that span multiple characters while the second one correspond to tokens that span a single character.","category":"page"},{"location":"lib/design/#","page":"Design","title":"Design","text":"Single character tokens are tokens that are exclusively defined by a single character. These characters cannot be part of multi-chars tokens. For instance, JuDoc.MD_1C_TOKENS corresponds to single-char tokens in markdown with entries such as:","category":"page"},{"location":"lib/design/#","page":"Design","title":"Design","text":"'{'  => :LXB_OPEN,","category":"page"},{"location":"lib/design/#","page":"Design","title":"Design","text":"The key of these entries is a Char and as soon as the function sees that character while it reads the content, a Token is formed with the corresponding name (here :LXB_OPEN which stands for latex-brace-open).","category":"page"},{"location":"lib/design/#","page":"Design","title":"Design","text":"As for multi-char tokens, for instance, JuDoc.MD_TOKENS, entries look like:","category":"page"},{"location":"lib/design/#","page":"Design","title":"Design","text":"'<' => [ isexactly(\"<!--\") => :COMMENT_OPEN ],","category":"page"},{"location":"lib/design/#","page":"Design","title":"Design","text":"The key of these entries is also of type Char (the first character of such a token) followed by a vector of JuDoc.TokenFinder which essentially is a pair where the first value indicates how to match the token and the second one what name to associate to it if there is a match. Since multiple tokens can start with the same character, there is a vector of \"rules\". Note that order in the vector matters: the first match wins.","category":"page"},{"location":"lib/design/#","page":"Design","title":"Design","text":"In the case above, if the function sees a < character while reading the content, it will look ahead and try to match exactly <!--. If there is a match, then a Token is formed with name :COMMENT_OPEN.","category":"page"},{"location":"lib/design/#","page":"Design","title":"Design","text":"Another look-ahead rule is incrlook which matches a variable number of characters that respect a given condition. For instance, let's consider markdown tokens that start with @:","category":"page"},{"location":"lib/design/#","page":"Design","title":"Design","text":"'@' => [\n     isexactly(\"@def\", [' '])  => :MD_DEF_OPEN,\n     isexactly(\"@@\", SPACER)   => :DIV_CLOSE,\n     incrlook((i, c) -> ifelse(i==1, c=='@', α(c, ('-',)))) => :DIV_OPEN ],","category":"page"},{"location":"lib/design/#","page":"Design","title":"Design","text":"The vector of TokenFinder contains three rules:","category":"page"},{"location":"lib/design/#","page":"Design","title":"Design","text":"try to match exactly @def followed by a space in which case a :MD_DEF_OPEN token is created,\ntry to match exactly @@ followed by any space character (e.g. a space or a line return) in which case a :DIV_CLOSE token is created,\ntry to match @@ followed by a number of letters or dashes.","category":"page"},{"location":"lib/design/#","page":"Design","title":"Design","text":"For the last case, note the function (i, c) -> ifelse(...) which takes a character index i and a character c starting at the first character after the initial matching character (here the initial matching character is an @ so the first character after that is also an @). So the function checks that the first character after the matching @ is also an @ and subsequently accepts any character that is either a letter or a -.","category":"page"},{"location":"lib/design/#","page":"Design","title":"Design","text":"julia> s = raw\"Hello @@d-name ... @@ etc\";\njulia> JuDoc.find_tokens(s, JuDoc.MD_TOKENS, JuDoc.MD_1C_TOKENS)\n2-element Array{JuDoc.Token,1}:\n JuDoc.Token(:DIV_OPEN, \"@@d-name\")\n JuDoc.Token(:DIV_CLOSE, \"@@\")\n","category":"page"},{"location":"lib/design/#Finding-OCBlocks-1","page":"Design","title":"Finding OCBlocks","text":"","category":"section"},{"location":"lib/design/#","page":"Design","title":"Design","text":"OCBlocks are simply defined by a name, an opening and a closing token and an indicator of whether there may be nested blocks or not. The function JuDoc.find_all_ocblocks takes a list of tokens and tries to match them corresponding to pre-defined rules.","category":"page"},{"location":"lib/design/#","page":"Design","title":"Design","text":"For instance, consider JD.MD_OCB which describes non-math ocblocks in markdown; it contains entries like:","category":"page"},{"location":"lib/design/#","page":"Design","title":"Design","text":":COMMENT => ((:COMMENT_OPEN => :COMMENT_CLOSE), false),","category":"page"},{"location":"lib/design/#","page":"Design","title":"Design","text":"indicating that a :COMMENT ocblock starts at a :COMMENT_OPEN token (a <!--) and ends at the next :COMMENT_CLOSE (a -->) with no nesting.","category":"page"},{"location":"lib/design/#","page":"Design","title":"Design","text":"When nesting is allowed (for instance div blocks can be nested) then the function find_all_ocblocks keeps track of the number of opening and closing tokens and returns the outer-most block (which will be decomposed further at a later stage).","category":"page"},{"location":"lib/design/#","page":"Design","title":"Design","text":"julia> s = raw\"Hello @@d-name-a ... @@d-name-b @@ ... @@ etc\";\njulia> t = JuDoc.find_tokens(s, JuDoc.MD_TOKENS, JuDoc.MD_1C_TOKENS);\njulia> ocb, _ = JuDoc.find_all_ocblocks(t, JuDoc.MD_OCB);\njulia> length(ocb)\n1\n\njulia> ocb[1].name\n:DIV\n\njulia> ocb[1].ss\n\"@@d-name-a ... @@d-name-b @@ ... @@\"\n","category":"page"},{"location":"lib/design/#","page":"Design","title":"Design","text":"When a token has been snapped up in a ocblock, it is marked as inactive so that it doesn't get re-processed.","category":"page"},{"location":"lib/design/#LaTeX-blocks-1","page":"Design","title":"LaTeX blocks","text":"","category":"section"},{"location":"lib/design/#","page":"Design","title":"Design","text":"When parsing a markdown file, after finding tokens and ocblocks, JuDoc tries to find JuDoc.LxDef and JuDoc.LxCom blocks (also AbstractBlock).","category":"page"},{"location":"lib/design/#","page":"Design","title":"Design","text":"The first one corresponds to LaTeX definitions of the form \\newcommand{\\name}[narg]{def} while the second one corresponds to LaTeX commands such as \\foo or \\foo{bar} or \\foo{bar}{baz} etc.","category":"page"},{"location":"lib/design/#","page":"Design","title":"Design","text":"The function JuDoc.find_md_lxdefs takes a vector of active tokens and a ocblocks and finds sequences that match the format of a newcommand. Its counterpart, JuDoc.find_md_lxcoms takes a vector of active tokens and definitions and ocblocks and finds sequences that match the format of a command.","category":"page"},{"location":"lib/design/#","page":"Design","title":"Design","text":"julia> s = raw\"a \\newcommand{\\foo}[1]{_blah #1_} and \\foo{hello} done.\";\njulia> t = JuDoc.find_tokens(s, JuDoc.MD_TOKENS, JuDoc.MD_1C_TOKENS);\njulia> ocb, t = JuDoc.find_all_ocblocks(t, JuDoc.MD_OCB);\njulia> lxd, t, braces, blocks = JuDoc.find_md_lxdefs(t, ocb);\njulia> lxd[1]\nJuDoc.LxDef(\"\\\\foo\", 1, \"_blah #1_\", 3, 33)\n\njulia> lxc, t = JuDoc.find_md_lxcoms(t, lxd, braces);\njulia> lxc[1]\nJuDoc.LxCom(\n   \"\\\\foo{hello}\",\n   Base.RefArray{...}(...),\n   JuDoc.OCBlock[JuDoc.OCBlock(:LXB, JuDoc.Token(:LXB_OPEN, \"{\") => JuDoc.Token(:LXB_CLOSE, \"}\"),\n   \"{hello}\", true)])\n","category":"page"},{"location":"lib/design/#","page":"Design","title":"Design","text":"In the LxCom, the output was truncated for readability, the second field is a reference to the appropriate LaTeX definition of the command while the final field is a vector formed of ocblocks which correspond to each of the arguments (here only a single one: {hello}).","category":"page"},{"location":"lib/design/#HTML-blocks-1","page":"Design","title":"HTML blocks","text":"","category":"section"},{"location":"lib/design/#","page":"Design","title":"Design","text":"When parsing a HTML file, JuDoc also tries first to find tokens (see JuDoc.HTML_TOKENS) and ocblocks (see JuDoc.HTML_OCB). In particular, it will find ocblocks of the form {{ ... }} (\"HTML blocks\"). Subsequently, JuDoc will try to qualify those HTML blocks and form a specific block such as a HIf or a HElse block (see JuDoc.qualify_html_hblocks):","category":"page"},{"location":"lib/design/#","page":"Design","title":"Design","text":"Form Name\n{{if var}} HIf\n{{elseif var}} HElseIf\n{{else}} HElse\n{{end}} HEnd\n{{is[not]def var}} HIs[Not]Def\n{{is[not]page path}} HIs[Not]Page","category":"page"},{"location":"lib/design/#","page":"Design","title":"Design","text":"These blocks can then be assembled in larger blocks such as HCond (corresponding to an if-elseif-else-end), see JuDoc.find_html_cblocks, JuDoc.JuDoc.find_html_cdblocks and JuDoc.JuDoc.find_html_cpblocks.","category":"page"},{"location":"lib/design/#Conversion-1","page":"Design","title":"Conversion","text":"","category":"section"},{"location":"lib/design/#Markdown-conversion-1","page":"Design","title":"Markdown conversion","text":"","category":"section"},{"location":"lib/design/#","page":"Design","title":"Design","text":"The core function corresponding to the conversion of a markdown document is, as mentioned before, JuDoc.convert_md. The first part corresponds to the parsing discussed above to find:","category":"page"},{"location":"lib/design/#","page":"Design","title":"Design","text":"tokens\nopen/close blocks\nLaTeX-like definitions\nLaTeX-like commands\nMarkdown definitions (e.g. @def x = 5)","category":"page"},{"location":"lib/design/#","page":"Design","title":"Design","text":"This parsing step creates a number of blocks which each have to be processed in turn. The function JuDoc.form_inter_md takes the vector of all blocks and latex definitions and forms an intermediate markdown where places where an insertion must occur are marked with ##JDINSERT##. This intermediate markdown is then fed to the function JuDoc.md2html which wraps around Julia's Markdown to HTML.","category":"page"},{"location":"lib/design/#","page":"Design","title":"Design","text":"Finally the function JuDoc.convert_inter_html takes the partial markdown and inserts the appropriately processed blocks where the ##JDINSERT## are. The function JuDoc.convert_block takes care of how blocks are converted before insertion (for instance how a math block should be properly fenced).","category":"page"},{"location":"lib/design/#HTML-conversion-1","page":"Design","title":"HTML conversion","text":"","category":"section"},{"location":"lib/design/#","page":"Design","title":"Design","text":"The core function corresponding to the conversion of a html document is, as mentioned before, JuDoc.convert_html. The first part corresponds to the parsing discussed above to find:","category":"page"},{"location":"lib/design/#","page":"Design","title":"Design","text":"tokens\nopen/close blocks\nconditional blocks (if ... elseif ... else ... end)\nconditional def blocks (isdef ... end)\nconditional page blocks (ifpage ... end)","category":"page"},{"location":"lib/design/#","page":"Design","title":"Design","text":"The final HTML page is written by sequentially writing what's between the blocks and then replacing the blocks by the appropriate content using the function JuDoc.convert_hblock.","category":"page"},{"location":"lib/public/#Public-Interface-1","page":"Public","title":"Public Interface","text":"","category":"section"},{"location":"lib/public/#","page":"Public","title":"Public","text":"Documentation for JuDoc.jl's exported functions","category":"page"},{"location":"lib/public/#","page":"Public","title":"Public","text":"JuDoc.newsite\nJuDoc.serve\nJuDoc.optimize\nJuDoc.publish\nJuDoc.cleanpull","category":"page"},{"location":"lib/public/#JuDocTemplates.newsite","page":"Public","title":"JuDocTemplates.newsite","text":"newsite(topdir; template=\"basic\", cd=true)\n\nGenerate a new folder (an error is thrown if it already exists) that contains the skeleton of a website that can be processed by JuDoc. The user can specify a template out of the list of available templates.\n\ntemplate=\"basic\" specify the name of the desired template,\ncd=true specify whether to change the current directory to the newly created folder or not.\nverbose=true specify whether to display information or not.\n\nExample\n\nnewsite(\"MyNewWebsite\", template=\"pure-sm\")\n\n\n\n\n\n","category":"function"},{"location":"lib/public/#JuDoc.serve","page":"Public","title":"JuDoc.serve","text":"serve(; clear, verb, port, single, prerender, nomess, isoptim, no_fail_prerender, eval_all, silent)\n\n\nRuns JuDoc in the current directory.\n\nKeyword arguments:\n\nclear=false:     whether to remove any existing output directory\nverb=false:      whether to display messages\nport=8000:       the port to use for the local server (should pick a number between 8000 and 9000)\nsingle=false:    whether to run a single pass or run continuously\nprerender=false: whether to pre-render javascript (KaTeX and highlight.js)\nnomess=false:    suppresses all messages (internal use).\nisoptim=false:   whether we're in an optimisation phase or not (if so, links are fixed in case                    of a project website, see write_page.\nno_fail_prerender=true: whether, in a prerendering phase, ignore errors and try to produce an output\neval_all=false:  whether to force re-evaluation of all code blocks\nsilent=false:    switch this on to suppress all output (including eval statements).\n\n\n\n\n\n","category":"function"},{"location":"lib/public/#JuDoc.optimize","page":"Public","title":"JuDoc.optimize","text":"optimize(; prerender, minify, sig, prepath, no_fail_prerender, suppress_errors)\n\n\nDoes a full pass followed by a pre-rendering and minification step.\n\nprerender=true: whether to pre-render katex and highlight.js (requires node.js)\nminify=true:    whether to minify output (requires python3 and css_html_js_minify)\nsig=false:      whether to return an integer indicating success (see publish)\nprepath=\"\":     set this to something like \"project-name\" if it's a project page\n\nNote: if the prerendering is set to true, the minification will take longer as the HTML files will be larger (especially if you have lots of maths on pages).\n\n\n\n\n\n","category":"function"},{"location":"lib/public/#JuDoc.publish","page":"Public","title":"JuDoc.publish","text":"publish(; prerender, minify, nopass, prepath, message)\n\n\nThis is a simple wrapper doing a git commit and git push without much fanciness. It assumes the current directory is a git folder. It also fixes all links if you specify prepath (or if it's set in config.md).\n\nKeyword arguments\n\nprerender=true: prerender javascript before pushing see optimize\nminify=true:    minify output before pushing see optimize\nnopass=false:   set this to true if you have already run optimize manually.\nprepath=\"\":     set this to something like \"project-name\" if it's a project page\nmessage=\"jd-update\": add commit message.\n\n\n\n\n\n","category":"function"},{"location":"lib/public/#JuDoc.cleanpull","page":"Public","title":"JuDoc.cleanpull","text":"cleanpull()\n\n\nCleanpull allows you to pull from your remote git repository after having removed the local output directory. This will help avoid merge clashes.\n\n\n\n\n\n","category":"function"},{"location":"lib/internals/#Internal-Interface-1","page":"Internals","title":"Internal Interface","text":"","category":"section"},{"location":"lib/internals/#","page":"Internals","title":"Internals","text":"Documentation for JuDoc.jl's internal interface.","category":"page"},{"location":"lib/internals/#File-processing-and-compilation-1","page":"Internals","title":"File processing and compilation","text":"","category":"section"},{"location":"lib/internals/#","page":"Internals","title":"Internals","text":"JuDoc.jd_setup\nJuDoc.jd_fullpass\nJuDoc.jd_loop\nJuDoc.process_file\nJuDoc.process_file_err","category":"page"},{"location":"lib/internals/#JuDoc.jd_setup","page":"Internals","title":"JuDoc.jd_setup","text":"jd_setup(; clear)\n\n\nSets up the collection of watched files by doing an initial scan of the input directory. It also sets the paths variables and prepares the output directory.\n\nKeyword argument\n\nclear=false: whether to remove any existing output directory\n\nSee also serve.\n\n\n\n\n\n","category":"function"},{"location":"lib/internals/#JuDoc.jd_fullpass","page":"Internals","title":"JuDoc.jd_fullpass","text":"jd_fullpass(watched_files; clear, verb, prerender, isoptim, no_fail_prerender)\n\n\nA single full pass of judoc looking at all watched files and processing them as appropriate.\n\nKeyword arguments\n\nclear=false:     whether to remove any existing output directory\nverb=false:      whether to display messages\nprerender=false: whether to prerender katex and code blocks\nisoptim=false  : whether it's an optimization pass\nno_fail_prerender=true: whether to skip if a prerendering goes wrong in which case don't prerender\n\nSee also jd_loop, serve and publish.\n\n\n\n\n\n","category":"function"},{"location":"lib/internals/#JuDoc.jd_loop","page":"Internals","title":"JuDoc.jd_loop","text":"jd_loop(cycle_counter, , watched_files; clear, verb)\n\n\nThis is the function that is continuously run, checks if files have been modified and if so, processes them. Every 30 cycles, it checks whether any file was added or deleted and consequently updates the watched_files.\n\nKeyword arguments\n\nclear=false: whether to remove any existing output directory\nverb=false:  whether to display messages\n\n\n\n\n\n","category":"function"},{"location":"lib/internals/#JuDoc.process_file","page":"Internals","title":"JuDoc.process_file","text":"process_file(case, fpair, args; kwargs...)\n\n\nSee process_file_err.\n\n\n\n\n\n","category":"function"},{"location":"lib/internals/#JuDoc.process_file_err","page":"Internals","title":"JuDoc.process_file_err","text":"process_file_err(case, fpair)\nprocess_file_err(case, fpair, head)\nprocess_file_err(case, fpair, head, pg_foot)\nprocess_file_err(case, fpair, head, pg_foot, foot)\nprocess_file_err(case, fpair, head, pg_foot, foot, t; clear, prerender, isoptim)\n\n\nConsiders a source file which, depending on case could be a html file or a file in judoc markdown etc, located in a place described by fpair, processes it by converting it and adding appropriate header and footer and writes it to the appropriate place. It can throw an error which will be caught in process_file(args...).\n\n\n\n\n\n","category":"function"},{"location":"lib/internals/#Conversion-1","page":"Internals","title":"Conversion","text":"","category":"section"},{"location":"lib/internals/#","page":"Internals","title":"Internals","text":"JuDoc.write_page\nJuDoc.convert_md\nJuDoc.form_inter_md\nJuDoc.md2html\nJuDoc.convert_inter_html\nJuDoc.convert_block\nJuDoc.convert_html\nJuDoc.convert_hblock\nJuDoc.build_page","category":"page"},{"location":"lib/internals/#JuDoc.write_page","page":"Internals","title":"JuDoc.write_page","text":"write_page(root, file, head, pg_foot, foot; prerender, isoptim)\n\n\nTake a path to an input markdown file (via root and file), then construct the appropriate HTML page (inserting head, pg_foot and foot) and finally write it at the appropriate place.\n\n\n\n\n\n","category":"function"},{"location":"lib/internals/#JuDoc.convert_md","page":"Internals","title":"JuDoc.convert_md","text":"convert_md(mds)\nconvert_md(mds, pre_lxdefs; isrecursive, isinternal, isconfig, has_mddefs)\n\n\nConvert a judoc markdown file read as mds into a judoc html string. Returns the html string as well as a dictionary of page variables.\n\nArguments\n\nmds:         the markdown string to process\npre_lxdefs:  a vector of LxDef that are already available.\n\nKeyword arguments\n\nisrecursive=false: a bool indicating whether the call is the parent call or a child call\nisinternal=false:  a bool indicating whether the call stems from jd2html in internal mode\nisconfig=false:    a bool indicating whether the file to convert is the configuration file\nhas_mddefs=true:   a bool indicating whether to look for definitions of page variables\n\n\n\n\n\n","category":"function"},{"location":"lib/internals/#JuDoc.form_inter_md","page":"Internals","title":"JuDoc.form_inter_md","text":"form_inter_md(mds, blocks, lxdefs)\n\n\nForm an intermediate MD file where special blocks are replaced by a marker (INSERT) indicating that a piece will need to be plugged in there later.\n\nArguments\n\nmds:    the (sub)string to convert\nblocks: vector of blocks\nlxdefs: existing latex definitions prior to the math block\n\n\n\n\n\n","category":"function"},{"location":"lib/internals/#JuDoc.md2html","page":"Internals","title":"JuDoc.md2html","text":"md2html(ss; stripp)\n\n\nConvenience function to call the base markdown to html converter on \"simple\" strings (i.e. strings that don't need to be further considered and don't contain anything else than markdown tokens). The boolean stripp indicates whether to remove the inserted <p> and </p> by the base markdown processor, this is relevant for things that are parsed within latex commands etc.\n\n\n\n\n\n","category":"function"},{"location":"lib/internals/#JuDoc.convert_inter_html","page":"Internals","title":"JuDoc.convert_inter_html","text":"convert_inter_html(ihtml, blocks, lxcontext)\n\n\nTake a partial markdown string with the INSERT marker and plug in the appropriately processed block.\n\nArguments\n\nihtml:     the intermediary html string (with INSERT)\nblocks:    vector of blocks\nlxcontext: latex context\n\n\n\n\n\n","category":"function"},{"location":"lib/internals/#JuDoc.convert_block","page":"Internals","title":"JuDoc.convert_block","text":"convert_block(β, lxcontext)\n\n\nHelper function for convert_inter_html that processes an extracted block given a latex context lxc and returns the processed html that needs to be plugged in the final html.\n\n\n\n\n\n","category":"function"},{"location":"lib/internals/#JuDoc.convert_html","page":"Internals","title":"JuDoc.convert_html","text":"convert_html(hs, allvars; isoptim)\n\n\nConvert a judoc html string into a html string (i.e. replace {{ ... }} blocks).\n\n\n\n\n\n","category":"function"},{"location":"lib/internals/#JuDoc.build_page","page":"Internals","title":"JuDoc.build_page","text":"build_page(head, content, pg_foot, foot)\n\n\nConvenience function to assemble the html out of its parts.\n\n\n\n\n\n","category":"function"},{"location":"lib/internals/#Pre-rendering-1","page":"Internals","title":"Pre-rendering","text":"","category":"section"},{"location":"lib/internals/#","page":"Internals","title":"Internals","text":"JuDoc.js_prerender_katex\nJuDoc.js_prerender_highlight","category":"page"},{"location":"lib/internals/#JuDoc.js_prerender_katex","page":"Internals","title":"JuDoc.js_prerender_katex","text":"js_prerender_katex(hs)\n\n\nTakes a html string that may contain inline katex blocks \\(...\\) or display katex blocks \\[ ... \\] and use node and katex to pre-render them to HTML.\n\n\n\n\n\n","category":"function"},{"location":"lib/internals/#JuDoc.js_prerender_highlight","page":"Internals","title":"JuDoc.js_prerender_highlight","text":"js_prerender_highlight(hs)\n\n\nTakes a html string that may contain <pre><code ... </code></pre> blocks and use node and highlight.js to pre-render them to HTML.\n\n\n\n\n\n","category":"function"},{"location":"lib/internals/#Parsing-1","page":"Internals","title":"Parsing","text":"","category":"section"},{"location":"lib/internals/#","page":"Internals","title":"Internals","text":"JuDoc.AbstractBlock\nJuDoc.Token\nJuDoc.OCBlock\nJuDoc.TokenFinder\nJuDoc.MD_TOKENS\nJuDoc.MD_1C_TOKENS\nJuDoc.LxDef\nJuDoc.LxCom\nJuDoc.HTML_TOKENS\nJuDoc.HTML_OCB","category":"page"},{"location":"lib/internals/#JuDoc.AbstractBlock","page":"Internals","title":"JuDoc.AbstractBlock","text":"abstract type AbstractBlock\n\nThis is the supertype defining a section of the string into consideration which can be considered as a \"block\". For instance, abc { ... } def contains one braces block corresponding to the substring { ... }. All subtypes of AbstractBlock must have a ss field corresponding to the substring associated to the block. See also Token, OCBlock.\n\n\n\n\n\n","category":"type"},{"location":"lib/internals/#JuDoc.Token","page":"Internals","title":"JuDoc.Token","text":"struct Token <: JuDoc.AbstractBlock\n\nA token τ::Token denotes a part of the source string indicating a region that may need further processing. It is identified by a symbol τ.name (e.g.: :MATH_ALIGN_OPEN). Tokens are typically used in this code to identify delimiters of environments. For instance, abc $ ... $ def contains two tokens :MATH_A associated with the $ sign. Together they delimit here an inline math expression.\n\n\n\n\n\n","category":"type"},{"location":"lib/internals/#JuDoc.OCBlock","page":"Internals","title":"JuDoc.OCBlock","text":"struct OCBlock <: JuDoc.AbstractBlock\n\nOpen-Close block, blocks that are defined by an opening Token and a closing Token, they may be nested. For instance braces block are formed of an opening { and a closing } and could be nested.\n\n\n\n\n\n","category":"type"},{"location":"lib/internals/#JuDoc.TokenFinder","page":"Internals","title":"JuDoc.TokenFinder","text":"TokenFinder\n\nConvenience type to define tokens. The Tuple comes from the output of functions such as isexactly.\n\n\n\n\n\n","category":"type"},{"location":"lib/internals/#JuDoc.MD_TOKENS","page":"Internals","title":"JuDoc.MD_TOKENS","text":"MD_TOKENS\n\nDictionary of tokens for Markdown. Note that for each, there may be several possibilities to consider in which case the order is important: the first case that works will be taken.\n\n\n\n\n\n","category":"constant"},{"location":"lib/internals/#JuDoc.MD_1C_TOKENS","page":"Internals","title":"JuDoc.MD_1C_TOKENS","text":"MD1CTOKENS\n\nDictionary of single-char tokens for Markdown. Note that these characters are exclusive, they cannot appear again in a larger token.\n\n\n\n\n\n","category":"constant"},{"location":"lib/internals/#JuDoc.LxDef","page":"Internals","title":"JuDoc.LxDef","text":"mutable struct LxDef\n\nStructure to keep track of the definition of a latex command declared via a ewcommand{ ame}[narg]{def}.\n\nNOTE: mutable so that we can modify the from element to mark it as zero when the command has been defined in the context of what we're currently parsing.\n\n\n\n\n\n","category":"type"},{"location":"lib/internals/#JuDoc.LxCom","page":"Internals","title":"JuDoc.LxCom","text":"struct LxCom <: JuDoc.AbstractBlock\n\nA LxCom has a similar content as a Block, with the addition of the definition and a vector of brace blocks.\n\n\n\n\n\n","category":"type"},{"location":"lib/internals/#JuDoc.HTML_TOKENS","page":"Internals","title":"JuDoc.HTML_TOKENS","text":"HTML_TOKENS\n\nDictionary of tokens for HTML. Note that for each, there may be several possibilities to consider in which case the order is important: the first case that works will be taken.\n\n\n\n\n\n","category":"constant"},{"location":"lib/internals/#JuDoc.HTML_OCB","page":"Internals","title":"JuDoc.HTML_OCB","text":"HTML_OCB\n\nList of HTML Open-Close blocks.\n\n\n\n\n\n","category":"constant"},{"location":"lib/internals/#","page":"Internals","title":"Internals","text":"JuDoc.isexactly\nJuDoc.find_tokens\nJuDoc.find_all_ocblocks\nJuDoc.find_md_lxdefs\nJuDoc.find_md_lxcoms\nJuDoc.qualify_html_hblocks\nJuDoc.find_html_cblocks\nJuDoc.JuDoc.find_html_cdblocks\nJuDoc.JuDoc.find_html_cpblocks","category":"page"},{"location":"lib/internals/#JuDoc.isexactly","page":"Internals","title":"JuDoc.isexactly","text":"isexactly(refstring)\nisexactly(refstring, follow)\nisexactly(refstring, follow, isfollowed)\n\n\nForward lookup checking if a sequence of characters matches refstring and is followed (or not followed if isfollowed==false) by a character out of a list of characters (follow). It returns\n\na number of steps indicating the number of characters to check,\nwhether there is an offset or not (if it is required to check a following character or not),\na function that can be applied on a sequence of character.\n\nExample\n\njulia> (s, b, f) = isexactly(\"aabbc\", \"d\", isfollowed=false);\njulia> f(\"aabbcd\")\nfalse\njulia> f(\"aabbce\")\ntrue\njulia> s\n5\n\n\n\n\n\n","category":"function"},{"location":"lib/internals/#JuDoc.find_tokens","page":"Internals","title":"JuDoc.find_tokens","text":"find_tokens(str, tokens_dict, stokens_dict)\n\n\nGo through a text left to right, one (valid) char at the time and keep track of sequences of chars that match specific tokens. The list of tokens found is returned.\n\nArguments\n\nstr:          the initial text\ntokens_dict:  dictionary of possible tokens (multiple characters long)\nstokens_dict: dictionaro of possible tokens (single character)\n\n\n\n\n\n","category":"function"},{"location":"lib/internals/#JuDoc.find_all_ocblocks","page":"Internals","title":"JuDoc.find_all_ocblocks","text":"find_all_ocblocks(tokens, ocplist; inmath)\n\n\nConvenience function to find all ocblocks e.g. such as MD_OCBLOCKS. Returns a vector of vectors of ocblocks.\n\n\n\n\n\n","category":"function"},{"location":"lib/internals/#JuDoc.find_md_lxdefs","page":"Internals","title":"JuDoc.find_md_lxdefs","text":"find_md_lxdefs(tokens, blocks)\n\n\nFind \\newcommand elements and try to parse what follows to form a proper Latex command. Return a list of such elements.\n\nThe format is:     \\newcommand{NAMING}[NARG]{DEFINING} where [NARG] is optional (see LX_NARG_PAT).\n\n\n\n\n\n","category":"function"},{"location":"lib/internals/#JuDoc.find_md_lxcoms","page":"Internals","title":"JuDoc.find_md_lxcoms","text":"find_md_lxcoms(tokens, lxdefs, braces)\nfind_md_lxcoms(tokens, lxdefs, braces, offset; inmath)\n\n\nFind \\command{arg1}{arg2}... outside of xblocks and lxdefs.\n\n\n\n\n\n","category":"function"},{"location":"lib/internals/#JuDoc.qualify_html_hblocks","page":"Internals","title":"JuDoc.qualify_html_hblocks","text":"qualify_html_hblocks(blocks)\n\n\nGiven {{ ... }} blocks, identify what kind of blocks they are and return a vector of qualified blocks of type AbstractBlock.\n\n\n\n\n\n","category":"function"}]
}
